{"version":3,"sources":["images/logo.svg","components/Navbar/NavbarElements.js","utils.js","constants/GeneralConstants.js","components/Navbar/index.js","pages/Calculator/CalculatorElements.js","pages/Calculator/calculator.js","pages/Home/HomeElements.js","pages/Home/home.js","pages/Contact/ContactElements.js","pages/Contact/contact.js","pages/PasswordGenerator/PasswordGeneratorElements.js","pages/PasswordGenerator/passwordGenerator.js","components/Sidebar/SidebarElements.js","components/Sidebar/index.js","pages/NetworkCalculator/NetworkCalculatorElements.js","pages/NetworkCalculator/networkCalculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","NavBtn","NavBtnLink","capitalizeName","name","word","toLocaleUpperCase","substring","length","asPath","line","Navbar","toggle","this","props","to","src","require","alt","onClick","activeStyle","color","Component","CalculatorContainer","CalculatorDivDisplay","h1","CalculatorDivButtons","CalculatorButton","button","CalculatorButtonGold","Calculator","handleClick","value","state","display","currentInput","operator","firstOperand","setState","result","parseFloat","toString","Math","sqrt","includes","HomeH1","Home","ContactContainer","ContactEmail","ContactRow","ContactCopyPasswordBtn","Contact","copyToClipboard","email","navigator","clipboard","writeText","then","console","log","catch","err","error","showToast","text","toast","success","position","POSITION","TOP_RIGHT","autoClose","closeOnClick","icon","hideProgressBar","process","toastStyle","textAlign","backgroundColor","PasswordGeneratorContainer","PasswordGeneratorH1","PasswordGeneratorRow","PasswordGeneratorColumn","PasswordGeneratorSelectGroup","PasswordGeneratorInputGroup","PasswordGeneratorLabel","label","PasswordGeneratorResultDiv","PasswordGeneratorResultP","strong","p","PasswordGeneratorInputTypeNumber","input","PasswordGeneratorInputTypeCheckbox","PasswordGeneratorBtnGenerate","PasswordGeneratorBtnReset","PasswordGeneratorCopyPasswordBtn","PasswordGenerator","password","generatePassword","charset","isUppercase","isLowercase","isNumbers","isSymbols","i","floor","random","handleChange","event","target","type","checked","newValue","resetPassword","onChange","min","max","SidebarContainer","aside","isSidebar","Icon","CloseIcon","FaTimes","SidebarDiv","SidebarUl","ul","SidebarLinkRouter","LinkRouter","Sidebar","onclick","NetworkCalculatorContainer","NetworkCalculatorH1","NetworkCalculatorInputGroup","NetworkCalculatorInputGroupLabel","NetworkCalculatorInputGroupInput","NetworkCalculatorRow","NetworkCalculatorColumnLeftBtn","NetworkCalculatorColumnRightBtn","NetworkCalculatorBtnNetData","NetworkCalculatorBtnReset","NetworkCalculatorH1Result","h3","NetworkCalculatorDivResult","NetworkCalculatorRowResult","NetworkCalculatorColumnLeftResult","NetworkCalculatorColumnRightResult","NetCalculator","handleInputChange","calculateNetInfo","ipAddress","cidr","ipParts","split","map","Number","cidrValue","parseInt","alert","subnetMask","wildcardMask","networkAddress","broadcastAddress","firstUsableHost","lastUsableHost","totalHosts","usableHosts","ipToString","binaryNetmask","toBinary","cidrNotation","ip","resetNetInfo","num","padStart","match","join","htmlFor","id","placeholder","App","path","exact","component","NetworkCalculator","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,0jECIpC,IAAMC,EAAMC,IAAOC,IAAV,KAYHC,EAAUF,YAAOG,IAAPH,CAAH,KAUPI,EAAOJ,YAAOK,IAAPL,CAAH,KAeJM,EAAUN,IAAOO,IAAV,KAiBPC,EAASR,IAAOC,IAAV,KAcNQ,EAAaT,YAAOG,IAAPH,CAAH,KCxEvB,SAASU,EAAeC,GACpB,IAAIC,EAAI,UAAMD,GACd,MAAM,GAAN,OAAUC,EAAK,GAAGC,oBAAsBD,EAAKE,UAAU,EAAGF,EAAKG,SAOpD,SAASC,EAAOC,GAC3B,MAAO,IAAMA,ECVV,IC8DQC,E,uKAtCH,IAEAC,EAAWC,KAAKC,MAAhBF,OAER,OACE,oCACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,CAASoB,GAAIN,EDfH,SCgBR,yBAAKO,IAAKC,EAAQ,IAA0BC,IAAI,UAElD,kBAACrB,EAAD,CAAMsB,QAASP,IACf,kBAACb,EAAD,KACE,kBAACJ,EAAD,CAASoB,GAAIN,EDpBL,QCoBmBW,YAAa,CAAEC,MDCpB,YCAnBlB,EDrBK,SCwBR,kBAACR,EAAD,CAASoB,GAAIN,EDnBD,YCmBmBW,YAAa,CAAEC,MDHxB,YCInBlB,EDrBI,OCoBP,IACyBA,EDvCjB,SC0CR,kBAACR,EAAD,CAASoB,GAAIN,EDjBS,sBCiBmBW,YAAa,CAAEC,MDPlC,YCQnBlB,EDpBO,UCmBV,IAC4BA,EDjCrB,QCoCP,kBAACR,EAAD,CAASoB,GAAIN,ED1CF,WC0CmBW,YAAa,CAAEC,MDXvB,YCWtB,YAKF,kBAACpB,EAAD,KACE,kBAACC,EAAD,CAAYa,GAAIN,EDtBL,YCsBX,kB,GA/BSa,a,ysDCrBd,IAAMC,EAAsB9B,IAAOO,IAAV,KAcnBwB,GALe/B,IAAOgC,GAAV,KAKWhC,IAAOO,IAAV,MAapB0B,EAAuBjC,IAAOO,IAAV,KAMpB2B,EAAmBlC,IAAOmC,OAAV,KAqBhBC,EAAuBpC,IAAOmC,OAAV,KC6DlBE,E,kDA3GX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IASViB,YAAc,SAACC,GAAW,IAAD,EACqC,EAAKC,MAAvDC,EADa,EACbA,QAASC,EADI,EACJA,aAAcC,EADV,EACUA,SAAUC,EADpB,EACoBA,aAEzC,GAAc,MAAVL,EACA,EAAKM,SAAS,CAAEJ,QAAS,IAAKC,aAAc,GAAIC,SAAU,KAAMC,aAAc,YAC3E,GAAc,MAAVL,GACP,GAAII,GAA6B,OAAjBC,EAAuB,CACnC,IAAIE,EACJ,OAAQH,GACJ,IAAK,IACDG,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,QACII,EAASJ,EAEjB,EAAKG,SAAS,CAAEJ,QAASK,EAAOE,WAAYN,aAAcI,EAAOE,WAAYL,SAAU,KAAMC,aAAc,aAE5G,GAAc,SAAVL,EACP,EAAKM,SAAS,CAAEH,eAA2C,EAA5BK,WAAWL,IAAoBM,WAAYL,SAAU,OAAKC,aAAcF,SACpG,GAAc,MAAVH,EACP,EAAKM,SAAS,CAAEH,cAAeK,WAAWL,GAAgB,KAAKM,WAAYL,SAAU,IAAKC,aAAcF,SACrG,GAAc,WAAVH,EACP,EAAKM,SAAS,CAAEH,aAAcO,KAAKC,KAAKH,WAAWL,IAAeM,WAAYL,SAAU,SAAKC,aAAcF,SACxG,GAAI,CAAC,IAAK,IAAK,IAAK,KAAKS,SAASZ,GACrC,GAAqB,OAAjBK,EACA,EAAKC,SAAS,CAAED,aAAcF,EAAcC,SAAUJ,EAAOG,aAAc,SACxE,CACH,IAAII,EACJ,OAAQH,GACJ,IAAK,IACDG,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,QACII,EAASJ,EAEjB,EAAKG,SAAS,CAAED,aAAcE,EAAOE,WAAYL,SAAUJ,EAAOG,aAAc,SAGpE,MAAZD,EACA,EAAKI,SAAS,CAAEJ,QAASF,EAAOG,aAAcH,IAE9C,EAAKM,SAAS,CAAEJ,QAASA,EAAUF,EAAOG,aAAcA,EAAeH,KAnE/E,EAAKC,MAAQ,CACTC,QAAS,IACTC,aAAc,GACdC,SAAU,KACVC,aAAc,MANH,E,qDA0ET,IAAD,OACL,OACI,oCACI,kBAACd,EAAD,KACI,kBAACC,EAAD,KAAuBX,KAAKoB,MAAMC,SAClC,kBAACR,EAAD,KACI,kBAACC,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,UAAlD,QACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,YAAtD,UACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,Y,GApGCT,a,uHCPlB,IAAMuB,EAASpD,IAAOgC,GAAV,KCaJqB,E,uKATX,OACE,oCACE,kBAACD,EAAD,gCACA,kBAAC,EAAD,W,GALWvB,a,ygCCFZ,IAAMyB,EAAmBtD,IAAOO,IAAV,KAShBgD,EAAevD,IAAOgC,GAAV,KAWZwB,EAAaxD,IAAOO,IAAV,KAMVkD,GAAyBzD,IAAOmC,OAAV,KCwCpBuB,G,kDAlDb,WAAYrC,GAAQ,IAAD,8BACjB,cAAMA,IAIRsC,gBAAkB,WAAO,IACfC,EAAU,EAAKpB,MAAfoB,MACRC,UAAUC,UAAUC,UAAUH,GAAOI,MAAK,WACxCC,QAAQC,IAAI,iCAEXC,OAAM,SAAAC,GACPH,QAAQI,MAAM,mBAAoBD,OAXnB,EAgBnBE,UAAY,SAACC,GACXC,IAAMC,QACJ,6BAAMF,GACN,CACEG,SAAUF,IAAMG,SAASC,UACzBC,UP7B+B,KO8B/BC,cAAc,EACdC,MAAM,EACNC,iBAAiB,KAtBrB,EAAKxC,MAAQ,CAAEoB,MAAOqB,oBAFL,E,qDA6BT,IAAD,OACCrB,EAAUxC,KAAKoB,MAAfoB,MACR,OACE,oCACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KAAeK,GACf,kBAACJ,EAAD,KACE,kBAACC,GAAD,CAAwB/B,QAAS,WAC/B,EAAKiC,kBACL,EAAKW,UAAU,gCAEd5D,EPrDK,QOiDR,IAI0BA,EP/CjB,YOmDb,kBAAC,IAAD,CAAOwE,WAAY,CAAEC,UAAW,SAAUvD,MAAO,QAASwD,gBAAiB,gB,GA9C7DvD,a,w6FCdf,IAAMwD,GAA6BrF,IAAOO,IAAV,MAU1B+E,GAAsBtF,IAAOgC,GAAV,MAKnBuD,GAAuBvF,IAAOO,IAAV,MAIpBiF,GAA0BxF,IAAOO,IAAV,MAIvBkF,GAA+BzF,IAAOO,IAAV,MAO5BmF,GAA8B1F,IAAOO,IAAV,MAI3BoF,GAAyB3F,IAAO4F,MAAV,MAMtBC,GAA6B7F,IAAOO,IAAV,MAW1BuF,IANgC9F,IAAO+F,OAAV,MAMF/F,IAAOgG,EAAV,OAMxBC,GAAmCjG,IAAOkG,MAAV,MAShCC,GAAqCnG,IAAOkG,MAAV,MAIlCE,GAA+BpG,IAAOmC,OAAV,MAmB5BkE,GAA4BrG,IAAOmC,OAAV,MAkBzBmE,GAAmCtG,IAAOmC,OAAV,MCmH9BoE,G,kDA3LX,WAAYlF,GAAQ,IAAD,8BACf,cAAMA,IAWVsC,gBAAkB,WAAO,IACb6C,EAAa,EAAKhE,MAAlBgE,SACR3C,UAAUC,UAAUC,UAAUyC,GAAUxC,MAAK,WACzCC,QAAQC,IAAI,oCAEbC,OAAM,SAAAC,GACLH,QAAQI,MAAM,mBAAoBD,OAlBvB,EAuBnBqC,iBAAmB,WAAO,IAAD,EAC8C,EAAKjE,MAAhEzB,EADa,EACbA,OACJ2F,EAAU,GAMd,GARqB,EACLC,cAECD,GT5BK,8BSyBD,EACQE,cAGZF,GT7CK,8BSyCD,EACqBG,YAI3BH,GTzCK,cSoCC,EACgCI,YAKtCJ,GThCK,iCSkCG,IAAnBA,EAAQ3F,OACR,MAAO,4CAIX,IADA,IAAIyF,EAAW,GACNO,EAAI,EAAGA,EAAIhG,EAAQgG,IAAK,CAE7BP,GAAYE,EADQzD,KAAK+D,MAAM/D,KAAKgE,SAAWP,EAAQ3F,SAI3D,EAAK8B,SAAS,CAAE2D,cAzCD,EA4CnBU,aAAe,SAACC,GAAW,IAAD,EACiBA,EAAMC,OAArCzG,EADc,EACdA,KAAM4B,EADQ,EACRA,MAAO8E,EADC,EACDA,KAAMC,EADL,EACKA,QACrBC,ET/EU,aS+ECF,EAAoBC,EAAU/E,EAC/C,EAAKM,SAAL,gBAAiBlC,EAAO4G,KA/CT,EAmDnBC,cAAgB,WAEZ,EAAK3E,SAAS,CAAE2D,SADD,MApDA,EAwDnBlC,UAAY,SAACC,GACTC,IAAMC,QACF,6BAAMF,GACN,CACIG,SAAUF,IAAMG,SAASC,UACzBC,UTxFuB,KSyFvBC,cAAc,EACdC,MAAM,EACNC,iBAAiB,KA9DzB,EAAKxC,MAAQ,CACTgE,SAAU,GACVzF,OAAQ,GACR4F,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,WAAW,GARA,E,qDAqET,IAAD,OACL,OACI,oCACI,kBAACxB,GAAD,KACK5E,ETpFG,YSmFR,IACgCA,ET/FvB,cSiGT,kBAAC2E,GAAD,KACI,kBAACI,GAAD,KACI,kBAACE,GAAD,6BAGI,kBAACM,GAAD,CACIoB,KT/FV,SSgGU1G,KTrGV,SSsGU4B,MAAOnB,KAAKoB,MAAMzB,OAClB0G,SAAUrG,KAAK8F,aACfQ,IAAI,IACJC,IAAI,UAKhB,kBAACpC,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTjIhB,WSkIgB1G,KAAK,cACL2G,QAASlG,KAAKoB,MAAMmE,YACpBc,SAAUrG,KAAK8F,eALvB,4BAaR,kBAAC1B,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KThJhB,WSiJgB1G,KAAK,cACL2G,QAASlG,KAAKoB,MAAMoE,YACpBa,SAAUrG,KAAK8F,eALvB,6BAcZ,kBAAC3B,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTjKhB,WSkKgB1G,KAAK,YACL2G,QAASlG,KAAKoB,MAAMqE,UACpBY,SAAUrG,KAAK8F,eALvB,0BAaR,kBAAC1B,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KThLhB,WSiLgB1G,KAAK,YACL2G,QAASlG,KAAKoB,MAAMsE,UACpBW,SAAUrG,KAAK8F,eALvB,2BAcZ,kBAACd,GAAD,CAA8B1E,QAASN,KAAKqF,kBACvC/F,ETpLD,YSmLJ,IACgCA,ETvK5B,aS0KJ,kBAAC2F,GAAD,CAA2B3E,QAASN,KAAKoG,eACpC9G,ETzKJ,US4KD,kBAACmF,GAAD,KAEQzE,KAAKoB,MAAMgE,SACP,kBAACV,GAAD,KACKpF,ET9LZ,aS6LO,IACiCA,ETlLzC,YSiLQ,IAEI,6BACCU,KAAKoB,MAAMgE,SACZ,kBAACF,GAAD,CAAkC5E,QAAS,WACvC,EAAKiC,kBACL,EAAKW,UAAU,mCAFnB,kBAOF,gCAIlB,kBAAC,IAAD,CAAOY,WAAY,CAAEC,UAAW,SAAUvD,MAAO,QAASwD,gBAAiB,gB,GAtL3DvD,a,msEChCzB,IAAM+F,GAAmB5H,IAAO6H,MAAV,MAYd,qBAAGC,UAA6B,OAAS,OAC7C,qBAAGA,UAA6B,IAAM,WAKpCC,GAAO/H,IAAOO,IAAV,MAUJyH,GAAYhI,YAAOiI,IAAPjI,CAAH,MAQTkI,GAAalI,IAAOO,IAAV,MAIV4H,GAAYnI,IAAOoI,GAAV,MAaTC,GAAoBrI,YAAOsI,IAAPtI,CAAH,MCRfuI,ID2BcvI,IAAOO,IAAV,MAKUP,YAAOsI,IAAPtI,CAAH,M,uKC3DnB,IAAD,EAEyBoB,KAAKC,MAA3ByG,EAFH,EAEGA,UAAW3G,EAFd,EAEcA,OAEnB,OACI,kBAACyG,GAAD,CAAkBE,UAAWA,EAAWpG,QAASP,GAC7C,kBAAC4G,GAAD,CAAMS,QAASrH,GACX,kBAAC6G,GAAD,OAEJ,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,CAAmB/G,GAAIN,EXjB3B,SWiB0CN,EXjB1C,SWkBI,kBAAC2H,GAAD,CAAmB/G,GAAIN,EXbvB,aWa0CN,EXd/C,OWcK,IAAgEA,EXhCpE,SWiCI,kBAAC2H,GAAD,CAAmB/G,GAAIN,EXRb,uBWQ0CN,EXVtD,UWUE,IAA6EA,EXvBlF,QWwBK,kBAAC2H,GAAD,CAAmB/G,GAAIN,EX9BxB,YW8B0CN,EX9B1C,mB,GWeDmB,c,8+FCnBf,IAAM4G,GAA6BzI,IAAOO,IAAV,MAU1BmI,GAAsB1I,IAAOgC,GAAV,MAKnB2G,GAA8B3I,IAAOO,IAAV,MAI3BqI,GAAmC5I,IAAOO,IAAV,MAMhCsI,GAAmC7I,IAAOkG,MAAV,MAQhC4C,GAAuB9I,IAAOO,IAAV,MAKpBwI,GAAiC/I,IAAOO,IAAV,MAM9ByI,GAAkChJ,IAAOO,IAAV,MAM/B0I,GAA8BjJ,IAAOmC,OAAV,MAgB3B+G,GAA4BlJ,IAAOmC,OAAV,MAkCzBgH,IAlB8BnJ,IAAOO,IAAV,MAMUP,IAAOO,IAAV,MAMIP,IAAOO,IAAV,MAMPP,IAAOoJ,GAAV,OAKzBC,GAA6BrJ,IAAOO,IAAV,MAM1B+I,GAA6BtJ,IAAOO,IAAV,MAK1BgJ,GAAoCvJ,IAAOO,IAAV,MAOjCiJ,GAAqCxJ,IAAOO,IAAV,MCwGhCkJ,G,kDA9MX,WAAYpI,GAAQ,IAAD,8BACf,cAAMA,IAiBVqI,kBAAoB,SAACvC,GAAW,IAAD,EACHA,EAAMC,OAAtBzG,EADmB,EACnBA,KAAM4B,EADa,EACbA,MACd,EAAKM,SAAL,gBACKlC,EAAO4B,KArBG,EAyBnBoH,iBAAmB,WAAO,IAAD,EACO,EAAKnH,MAAzBoH,EADa,EACbA,UAAWC,EADE,EACFA,KACbC,EAAUF,EAAUG,MAAM,KAAKC,IAAIC,QACnCC,EAAYC,SAASN,EAAM,IAEjC,GAAuB,IAAnBC,EAAQ/I,QAAgBmJ,EAAY,GAAKA,EAAY,GACrDE,MAAM,wCADV,CAKA,IAAMC,EAAc,YAAe,GAAKH,IAAgB,EAClDI,EAA6B,YAAbD,EAEhBE,GADgBT,EAAQ,IAAM,GAAOA,EAAQ,IAAM,GAAOA,EAAQ,IAAM,EAAKA,EAAQ,IACrDO,EAChCG,EAAmBD,GAAkBF,EACrCI,EAAkBF,EAAiB,EACnCG,EAAiBF,EAAmB,EACpCG,EAAU,SAAG,EAAM,GAAKT,GACxBU,EAAcD,EAAa,EAEjC,EAAK9H,SAAS,CACV0H,eAAgB,EAAKM,WAAWN,GAChCC,iBAAkB,EAAKK,WAAWL,GAClCC,gBAAiB,EAAKI,WAAWJ,GACjCC,eAAgB,EAAKG,WAAWH,GAChCC,aACAC,cACAP,WAAY,EAAKQ,WAAWR,GAC5BC,aAAc,EAAKO,WAAWP,GAC9BQ,cAAe,EAAKC,SAASV,GAC7BW,aAAa,GAAD,OAAKpB,EAAL,YAAkBC,OAvDnB,EA2DnBgB,WAAa,SAACI,GACV,MAAM,GAAN,OAAWA,IAAO,GAAM,IAAxB,YAAiCA,IAAO,GAAM,IAA9C,YAAuDA,IAAO,EAAK,IAAnE,YAAgF,IAALA,IA5D5D,EA+DnBC,aAAe,WACX,EAAKrI,SAAS,CACV+G,Ub/EsB,cagFtBC,KbjFgB,KakFhBU,eAAgB,GAChBC,iBAAkB,GAClBC,gBAAiB,GACjBC,eAAgB,GAChBC,WAAY,GACZC,YAAa,GACbP,WAAY,GACZC,aAAc,GACdQ,cAAe,GACfE,aAAc,MA5EH,EAgFnBD,SAAW,SAACI,GAER,OADqBA,EAAInI,SAAS,GAAGoI,SAAS,GAAI,KAC9BC,MAAM,WAAWC,KAAK,MAhF1C,EAAK9I,MAAQ,CACToH,UbjBsB,cakBtBC,KbnBgB,KaoBhBU,eAAgB,GAChBC,iBAAkB,GAClBC,gBAAiB,GACjBC,eAAgB,GAChBC,WAAY,GACZC,YAAa,GACbP,WAAY,GACZC,aAAc,GACdQ,cAAe,GACfE,aAAc,IAdH,E,qDAqFT,IAAD,EAcD5J,KAAKoB,MAZLoH,EAFC,EAEDA,UACAC,EAHC,EAGDA,KACAU,EAJC,EAIDA,eACAC,EALC,EAKDA,iBACAC,EANC,EAMDA,gBACAC,EAPC,EAODA,eACAC,EARC,EAQDA,WACAC,EATC,EASDA,YACAP,EAVC,EAUDA,WACAC,EAXC,EAWDA,aACAQ,EAZC,EAYDA,cACAE,EAbC,EAaDA,aAGJ,OACI,oCACI,kBAACtC,GAAD,KACKhI,EbzGE,WawGP,IAC+BA,Eb5HrB,ea8HV,kBAAC+H,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,CAAkC2C,QAAQ,aAA1C,eACA,kBAAC1C,GAAD,CACIxB,KAAK,OACLmE,GAAG,YACH7K,KAAK,YACL4B,MAAOqH,EACPnC,SAAUrG,KAAKsI,kBACf+B,YAAY,0CAGpB,kBAAC9C,GAAD,KACI,kBAACC,GAAD,CAAkC2C,QAAQ,QAA1C,SACA,kBAAC1C,GAAD,CACIxB,KAAK,SACLmE,GAAG,OACH7K,KAAK,OACL4B,MAAOsH,EACPpC,SAAUrG,KAAKsI,kBACf+B,YAAY,oBACZ/D,IAAI,IACJC,IAAI,QAGZ,kBAACmB,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,CAA6BvH,QAASN,KAAKuI,kBACtCjJ,EbzId,OawIS,IAC2BA,EbtJnC,UayJI,kBAACsI,GAAD,KACI,kBAACE,GAAD,CAA2BxH,QAASN,KAAK8J,cACpCxK,EbtIZ,aa2IJ6J,GACG,kBAAClB,GAAD,KACI,kBAACF,GAAD,KAA4BzI,EbnJ7B,WamJC,IAAsDA,EblK1D,SamKI,kBAAC4I,GAAD,KACI,kBAACC,GAAD,yBACA,kBAACC,GAAD,KAAqCe,IAGzC,kBAACjB,GAAD,KACI,kBAACC,GAAD,2BACA,kBAACC,GAAD,KAAqCgB,IAGzC,kBAAClB,GAAD,KACI,kBAACC,GAAD,2BACA,kBAACC,GAAD,KAAqCiB,IAGzC,kBAACnB,GAAD,KACI,kBAACC,GAAD,0BACA,kBAACC,GAAD,KAAqCkB,IAGzC,kBAACpB,GAAD,KACI,kBAACC,GAAD,qBACA,kBAACC,GAAD,KAAqCmB,IAGzC,kBAACrB,GAAD,KACI,kBAACC,GAAD,sBACA,kBAACC,GAAD,KAAqCoB,IAIzC,kBAACtB,GAAD,KACI,kBAACC,GAAD,qBACA,kBAACC,GAAD,KAAqCa,IAIzC,kBAACf,GAAD,KACI,kBAACC,GAAD,uBACA,kBAACC,GAAD,KAAqCc,IAGzC,kBAAChB,GAAD,KACI,kBAACC,GAAD,wBACA,kBAACC,GAAD,KAAqCsB,IAGzC,kBAACxB,GAAD,KACI,kBAACC,GAAD,uBACA,kBAACC,GAAD,KAAqCwB,U,GArMrCnJ,aCgCb6J,G,kDAlCb,aAAe,IAAD,8BACZ,gBAMFvK,OAAS,WACP,EAAKqB,MAAMsF,UACT,EAAKjF,SAAS,CAAEiF,WAAW,IAC3B,EAAKjF,SAAS,CAAEiF,WAAW,KAR7B,EAAKtF,MAAQ,CACXsF,WAAW,GAHD,E,qDAaJ,IAEFA,EAAc1G,KAAKoB,MAAnBsF,UAEN,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQA,UAAWA,EAAW3G,OAAQC,KAAKD,SAC3C,kBAAC,GAAD,CAAS2G,UAAWA,EAAW3G,OAAQC,KAAKD,SAC5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwK,KAAM3K,Ed1BH,Qc0BiB4K,OAAK,EAACC,UAAWxI,IAC5C,kBAAC,IAAD,CAAOsI,KAAM3K,EdtBC,YcsBiB6K,UAAWC,KAC1C,kBAAC,IAAD,CAAOH,KAAM3K,EdjBW,sBciBiB6K,UAAWtF,KACpD,kBAAC,IAAD,CAAOoF,KAAM3K,EdvCA,WcuCiB6K,UAAWnI,KAEzC,kBAAC,IAAD,CAAOiI,KAAK,IAAIE,UAAWxI,U,GA7BnBxB,aCNEkK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCbNc,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmB1I,WACrBA,UAAU2I,cAAcC,MACrBzI,MAAK,SAAA0I,GACJA,EAAaC,gBAEdxI,OAAM,SAAAE,GACLJ,QAAQI,MAAMA,EAAMuI,c","file":"static/js/main.fd82852f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf09acc3.svg\";","import { FaBars } from 'react-icons/fa';\nimport { NavLink as Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Nav = styled.nav`\n  background: #000;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem calc((100vw - 1000px) / 2);\n  z-index: 10;\n\n  /* Third Nav */\n  /* justify-content: flex-start; */\n`;\n\nexport const NavLink = styled(Link)`\n  color: #fff;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n`;\n\nexport const Bars = styled(FaBars)`\n  display: none;\n  color: #fff;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(-100%, 75%);\n    font-size: 1.8rem;\n    cursor: pointer;\n  }\n`;\n\nexport const NavMenu = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: -24px;\n\n  /* Second Nav */\n  /* margin-right: 24px; */\n\n  /* Third Nav */\n  /* width: 100vw;\n  white-space: nowrap; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtn = styled.nav`\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n\n  /* Third Nav */\n  /* justify-content: flex-end;\n  width: 100vw; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtnLink = styled(Link)`\n  border-radius: 4px;\n  //background: #256ce1;\n  background: #000;\n  padding: 10px 22px;\n  //color: #fff;\n  color: #000;\n  outline: none;\n  border: none;\n  //cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;  \n\n  pointer-events: none;\n\n  /* Second Nav */\n  margin-left: 24px;\n\n  /*\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    //background: #fff;\n    background: #000;\n    //color: #010606;\n    color: #000;\n  }\n  */\n`;\n","function capitalizeName(name) {\n    var word = `${name}`;\n    return `${word[0].toLocaleUpperCase() + word.substring(1, word.length)}`\n}\n\nfunction trimLine(line) {\n    return line.replace(\" \", \"\");\n}\n\nexport default function asPath(line) {\n    return \"/\" + line;\n}\n\nexport { asPath, capitalizeName, trimLine };","export const ABOUT = \"about\";\nexport const ADVANCED_CALCULATOR = \"advanced-calculator\";\nexport const CALC = \"calc\";\nexport const CALCULATOR = \"calculator\";\nexport const CHECKBOX = \"checkbox\";\nexport const COPY = \"copy\";\nexport const CONTACT = \"contact\";\nexport const DATA = \"data\"\nexport const DEFAULT_CIDR = \"24\"\nexport const DEFAULT_IP_ADDRESS = \"192.168.1.1\"\nexport const DEFAULT_TOAST_AUTOCLOSE = 1500\nexport const EMAIL = \"email\";\nexport const GEN = \"gen\";\nexport const GENERATE = \"generate\";\nexport const GENERATED = \"generated\";\nexport const GENERATOR = \"generator\";\nexport const HOME = \"home\";\nexport const IN = \"in\";\nexport const LENGTH = \"length\";\nexport const LOWERCASE_LIST = 'abcdefghijklmnopqrstuvwxyz';\nexport const NET = 'net';\nexport const NET_CALC = 'net-calc';\nexport const NETWORK = 'network';\nexport const NUMBER = 'number';\nexport const NUMBERS_LIST = '0123456789';\nexport const PASSWD = \"passwd\";\nexport const PASSWORD = \"password\";\nexport const PASSWORD_GENERATOR = \"password-generator\";\nexport const RESET = \"reset\";\nexport const ROOT = \"/\";\nexport const SERVICES = \"services\";\nexport const SIGN = \"sign\";\nexport const SIGN_IN = \"sign-in\";\nexport const SIGN_UP = \"sign-up\";\nexport const SYMBOLS_LIST = '!@#$%^&*()_+~`|}{[]:;<>?,./-=';\nexport const UPPERCASE_LIST = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const MAIN_BLUE_HEX_CODE = \"#15cdfc\";","import React, { Component } from 'react';\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavMenu,\n  NavBtn,\n  NavBtnLink\n} from './NavbarElements';\nimport { asPath, capitalizeName } from '../../utils';\nimport {\n  CALC,\n  CONTACT,\n  GEN,\n  HOME,\n  MAIN_BLUE_HEX_CODE,\n  NET,\n  NET_CALC,\n  PASSWD,\n  PASSWORD_GENERATOR,\n  SIGN_IN\n} from '../../constants/GeneralConstants';\n\nclass Navbar extends Component {\n  render() {\n\n    const { toggle } = this.props;\n\n    return (\n      <>\n        <Nav>\n          <NavLink to={asPath(HOME)}>\n            <img src={require('../../images/logo.svg')} alt='logo' />\n          </NavLink>\n          <Bars onClick={toggle} />\n          <NavMenu>\n            <NavLink to={asPath(HOME)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(HOME)}\n            </NavLink>\n\n            <NavLink to={asPath(NET_CALC)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(NET)} {capitalizeName(CALC)}\n            </NavLink>\n\n            <NavLink to={asPath(PASSWORD_GENERATOR)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(PASSWD)} {capitalizeName(GEN)}\n            </NavLink>\n\n            <NavLink to={asPath(CONTACT)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              Contact\n            </NavLink>\n          </NavMenu>\n\n          <NavBtn>\n            <NavBtnLink to={asPath(SIGN_IN)}>Sign In</NavBtnLink>\n          </NavBtn>\n        </Nav>\n      </>\n    );\n  }\n}\n\nexport default Navbar;\n","import styled from 'styled-components';\n\nexport const CalculatorContainer = styled.div`\n    background-color: #333;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    width: 300px;\n    margin: 50px auto;\n`;\n\nexport const CalculatorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const CalculatorDivDisplay = styled.div`\n    background-color: #222;\n    color: #fff;\n    font-size: 2em;\n    text-align: right;\n    padding: 20px;\n    border-radius: 5px;\n    margin-bottom: 10px;\n    overflow: hidden;\n    white-space: nowrap;\n`;\n\n\nexport const CalculatorDivButtons = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n`;\n\nexport const CalculatorButton = styled.button`\n    background-color: #555;\n    color: #fff;\n    font-size: 1.2em;\n    border: none;\n    border-radius: 5px;\n    padding: 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:active {\n        transition: all 0.1s ease-in-out;\n        background-color: #444;\n    }\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #777;\n    }\n`;\n\nexport const CalculatorButtonGold = styled.button`\n    background-color: #e39e2e;\n    color: #fff;\n    font-size: 1.2em;\n    border: none;\n    border-radius: 5px;\n    padding: 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:active {\n        transition: all 0.1s ease-in-out;\n        background-color: #444;\n    }\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #f9cd69;\n    }\n`;","import React, { Component } from 'react';\nimport {\n    CalculatorButton,\n    CalculatorButtonGold,\n    CalculatorContainer,\n    CalculatorDivButtons,\n    CalculatorDivDisplay\n} from './CalculatorElements';\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: '0',\n            currentInput: '',\n            operator: null,\n            firstOperand: null,\n        };\n    }\n\n    handleClick = (value) => {\n        const { display, currentInput, operator, firstOperand } = this.state;\n\n        if (value === 'C') {\n            this.setState({ display: '0', currentInput: '', operator: null, firstOperand: null });\n        } else if (value === '=') {\n            if (operator && firstOperand !== null) {\n                let result;\n                switch (operator) {\n                    case '+':\n                        result = parseFloat(firstOperand) + parseFloat(currentInput);\n                        break;\n                    case '-':\n                        result = parseFloat(firstOperand) - parseFloat(currentInput);\n                        break;\n                    case '*':\n                        result = parseFloat(firstOperand) * parseFloat(currentInput);\n                        break;\n                    case '/':\n                        result = parseFloat(firstOperand) / parseFloat(currentInput);\n                        break;\n                    default:\n                        result = currentInput;\n                }\n                this.setState({ display: result.toString(), currentInput: result.toString(), operator: null, firstOperand: null });\n            }\n        } else if (value === '±') {\n            this.setState({ currentInput: (parseFloat(currentInput) * -1).toString(), operator: '±', firstOperand: currentInput });\n        } else if (value === '%') {\n            this.setState({ currentInput: (parseFloat(currentInput) / 100).toString(), operator: '%', firstOperand: currentInput });\n        } else if (value === '√') {\n            this.setState({ currentInput: Math.sqrt(parseFloat(currentInput)).toString(), operator: '√', firstOperand: currentInput });\n        } else if (['+', '-', '*', '/'].includes(value)) {\n            if (firstOperand === null) {\n                this.setState({ firstOperand: currentInput, operator: value, currentInput: '' });\n            } else {\n                let result;\n                switch (operator) {\n                    case '+':\n                        result = parseFloat(firstOperand) + parseFloat(currentInput);\n                        break;\n                    case '-':\n                        result = parseFloat(firstOperand) - parseFloat(currentInput);\n                        break;\n                    case '*':\n                        result = parseFloat(firstOperand) * parseFloat(currentInput);\n                        break;\n                    case '/':\n                        result = parseFloat(firstOperand) / parseFloat(currentInput);\n                        break;\n                    default:\n                        result = currentInput;\n                }\n                this.setState({ firstOperand: result.toString(), operator: value, currentInput: '' });\n            }\n        } else {\n            if (display === '0') {\n                this.setState({ display: value, currentInput: value });\n            } else {\n                this.setState({ display: display + value, currentInput: currentInput + value });\n            }\n        }\n    };\n\n    render() {\n        return (\n            <>\n                <CalculatorContainer>\n                    <CalculatorDivDisplay>{this.state.display}</CalculatorDivDisplay>\n                    <CalculatorDivButtons>\n                        <CalculatorButton onClick={() => this.handleClick('C')}>C</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('±')}>±</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('%')}>%</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('√')}>√</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('7')}>7</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('8')}>8</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('9')}>9</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('/')}>/</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('4')}>4</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('5')}>5</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('6')}>6</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('*')}>*</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('1')}>1</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('2')}>2</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('3')}>3</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('-')}>-</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('0')}>0</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('.')}>.</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('=')}>=</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('+')}>+</CalculatorButtonGold>\n                    </CalculatorDivButtons>\n                </CalculatorContainer>\n            </>\n        );\n    }\n}\n\nexport default Calculator;","import styled from 'styled-components';\n\nexport const HomeH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;","import React, { Component } from 'react'\nimport Calculator from '../Calculator/calculator';\nimport { HomeH1 } from './HomeElements';\n\nclass Home extends Component {\n  render() {\n    return (\n      <>\n        <HomeH1>Welcome to Online Tools</HomeH1>\n        <Calculator />\n      </>\n    )\n  }\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled.div`\n    max-width: 400px;\n    padding: 20px;\n    text-align: center;\n    margin-top: 240px;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const ContactEmail = styled.h1`\n    color: black;\n    text-align: center;\n    margin-bottom: 24px;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        color: #256ce1;\n    }\n`;\n\nexport const ContactRow = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const ContactCopyPasswordBtn = styled.button`\n    display: block;\n    min-width: 210px;\n    padding: 10px;\n    margin: 10px 0px 10px 0px;\n    background-color: #fff;\n    color: black;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #d9dada;\n    }\n`;","import React, { Component } from 'react'\nimport { ToastContainer as Toast, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; //styles to Toast\nimport { capitalizeName } from '../../utils';\nimport {\n  ContactContainer,\n  ContactCopyPasswordBtn,\n  ContactEmail,\n  ContactRow\n} from './ContactElements';\nimport {\n  COPY,\n  DEFAULT_TOAST_AUTOCLOSE,\n  EMAIL\n} from '../../constants/GeneralConstants';\n\nclass Contact extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { email: process.env.REACT_APP_EMAIL };\n  }\n\n  copyToClipboard = () => {\n    const { email } = this.state;\n    navigator.clipboard.writeText(email).then(() => {\n      console.log('Email copied to clipboard!');\n      //this.showToast('✅ Email copied to clipboard! ✅')\n    }).catch(err => {\n      console.error('Failed to copy: ', err);\n      //this.showToast('❌ Failed to copy the email ❌')\n    });\n  };\n\n  showToast = (text) => {\n    toast.success(\n      <div>{text}</div>,\n      {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: DEFAULT_TOAST_AUTOCLOSE,\n        closeOnClick: true,\n        icon: false,\n        hideProgressBar: true\n      }\n    );\n  }\n\n  render() {\n    const { email } = this.state;\n    return (\n      <>\n        <ContactContainer>\n          <ContactEmail>{email}</ContactEmail>\n          <ContactRow>\n            <ContactCopyPasswordBtn onClick={() => {\n              this.copyToClipboard();\n              this.showToast('Email copied to clipboard!')\n            }}>\n              {capitalizeName(COPY)} {capitalizeName(EMAIL)}\n            </ContactCopyPasswordBtn>\n          </ContactRow>\n        </ContactContainer>\n        <Toast toastStyle={{ textAlign: \"center\", color: \"white\", backgroundColor: \"green\" }} />\n      </>\n    )\n  }\n}\n\nexport default Contact;\n","import styled from 'styled-components';\n\nexport const PasswordGeneratorContainer = styled.div`\n    max-width: 400px;\n    margin: 50px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const PasswordGeneratorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const PasswordGeneratorRow = styled.div`\n    display: flex;\n`;\n\nexport const PasswordGeneratorColumn = styled.div`\n    flex: 50%;\n`;\n\nexport const PasswordGeneratorSelectGroup = styled.div`\n    margin-bottom: 15px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;    \n`;\n\nexport const PasswordGeneratorInputGroup = styled.div`\n    margin-bottom: 15px;\n`;\n\nexport const PasswordGeneratorLabel = styled.label`\n    color: #555;\n    display: block;\n    margin-bottom: 5px;\n`;\n\nexport const PasswordGeneratorResultDiv = styled.div`\n    margin-top: 20px;\n    text-align: center;\n`;\n\nexport const PasswordGeneratorResultStrong = styled.strong`\n    display: block;\n    margin-bottom: 10px;\n    color: #333;\n`;\n\nexport const PasswordGeneratorResultP = styled.p`\n    font-size: 18px;\n    color: #555;\n    word-break: break-all;\n`;\n\nexport const PasswordGeneratorInputTypeNumber = styled.input`\n    font-size: 18px;\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n`;\n\nexport const PasswordGeneratorInputTypeCheckbox = styled.input`\n    margin-right: 1px;\n`;\n\nexport const PasswordGeneratorBtnGenerate = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 3px;\n    background-color: #256ce1;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #15cdfc;\n    }\n`;\n\nexport const PasswordGeneratorBtnReset = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    background-color: #ff4c4c;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #f96e5a;\n    }\n`;\n\nexport const PasswordGeneratorCopyPasswordBtn = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    margin: 10px 0px 10px 0px;\n    background-color: #fff;\n    color: black;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #d9dada;\n    }\n`;","import React, { Component } from 'react';\nimport { ToastContainer as Toast, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; //styles to Toast\nimport { capitalizeName } from '../../utils';\nimport {\n    PasswordGeneratorContainer,\n    PasswordGeneratorH1,\n    PasswordGeneratorInputGroup,\n    PasswordGeneratorInputTypeNumber,\n    PasswordGeneratorInputTypeCheckbox,\n    PasswordGeneratorLabel,\n    PasswordGeneratorCopyPasswordBtn,\n    PasswordGeneratorBtnGenerate,\n    PasswordGeneratorBtnReset,\n    PasswordGeneratorResultDiv,\n    PasswordGeneratorResultP,\n    PasswordGeneratorColumn,\n    PasswordGeneratorRow,\n    PasswordGeneratorSelectGroup\n} from './PasswordGeneratorElements';\nimport {\n    CHECKBOX,\n    DEFAULT_TOAST_AUTOCLOSE,\n    GENERATE,\n    GENERATED,\n    GENERATOR,\n    LENGTH,\n    LOWERCASE_LIST,\n    NUMBER,\n    NUMBERS_LIST,\n    PASSWORD,\n    RESET,\n    SYMBOLS_LIST,\n    UPPERCASE_LIST\n} from '../../constants/GeneralConstants';\n\nclass PasswordGenerator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: '',\n            length: 12,\n            isUppercase: true,\n            isLowercase: true,\n            isNumbers: true,\n            isSymbols: true,\n        };\n    }\n\n    copyToClipboard = () => {\n        const { password } = this.state;\n        navigator.clipboard.writeText(password).then(() => {\n            console.log('Password copied to clipboard!');\n            //this.showToast('✅ Password copied to clipboard! ✅')\n        }).catch(err => {\n            console.error('Failed to copy: ', err);\n            //this.showToast('❌ Failed to copy the password ❌')\n        });\n    };\n\n    generatePassword = () => {\n        const { length, isUppercase, isLowercase, isNumbers, isSymbols } = this.state;\n        let charset = '';\n        if (isUppercase) charset += UPPERCASE_LIST;\n        if (isLowercase) charset += LOWERCASE_LIST;\n        if (isNumbers) charset += NUMBERS_LIST;\n        if (isSymbols) charset += SYMBOLS_LIST;\n\n        if (charset.length === 0) {\n            return 'Please select at least one character type';\n        }\n\n        let password = '';\n        for (let i = 0; i < length; i++) {\n            const randomIndex = Math.floor(Math.random() * charset.length);\n            password += charset[randomIndex];\n        }\n\n        this.setState({ password });\n    };\n\n    handleChange = (event) => {\n        const { name, value, type, checked } = event.target;\n        const newValue = type === CHECKBOX ? checked : value;\n        this.setState({ [name]: newValue });\n    };\n\n\n    resetPassword = () => {\n        let password = '';\n        this.setState({ password });\n    };\n\n    showToast = (text) => {\n        toast.success(\n            <div>{text}</div>,\n            {\n                position: toast.POSITION.TOP_RIGHT,\n                autoClose: DEFAULT_TOAST_AUTOCLOSE,\n                closeOnClick: true,\n                icon: false,\n                hideProgressBar: true\n            }\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <PasswordGeneratorH1>\n                    {capitalizeName(PASSWORD)} {capitalizeName(GENERATOR)}\n                </PasswordGeneratorH1>\n                <PasswordGeneratorContainer>\n                    <PasswordGeneratorSelectGroup>\n                        <PasswordGeneratorLabel>\n                            Password Length:\n                            &nbsp;\n                            <PasswordGeneratorInputTypeNumber\n                                type={NUMBER}\n                                name={LENGTH}\n                                value={this.state.length}\n                                onChange={this.handleChange}\n                                min=\"1\"\n                                max=\"100\"\n                            />\n                        </PasswordGeneratorLabel>\n                    </PasswordGeneratorSelectGroup>\n\n                    <PasswordGeneratorRow>\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isUppercase\"\n                                        checked={this.state.isUppercase}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Uppercase\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isLowercase\"\n                                        checked={this.state.isLowercase}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Lowercase\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n                    </PasswordGeneratorRow>\n\n                    <PasswordGeneratorRow>\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isNumbers\"\n                                        checked={this.state.isNumbers}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Numbers\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isSymbols\"\n                                        checked={this.state.isSymbols}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Symbols\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n                    </PasswordGeneratorRow>\n\n                    <PasswordGeneratorBtnGenerate onClick={this.generatePassword}>\n                        {capitalizeName(GENERATE)} {capitalizeName(PASSWORD)}\n                    </PasswordGeneratorBtnGenerate>\n\n                    <PasswordGeneratorBtnReset onClick={this.resetPassword}>\n                        {capitalizeName(RESET)}\n                    </PasswordGeneratorBtnReset>\n\n                    <PasswordGeneratorResultDiv>\n                        {\n                            this.state.password ?\n                                <PasswordGeneratorResultP>\n                                    {capitalizeName(GENERATED)} {capitalizeName(PASSWORD)}:\n                                    <br />\n                                    {this.state.password}\n                                    <PasswordGeneratorCopyPasswordBtn onClick={() => {\n                                        this.copyToClipboard();\n                                        this.showToast('Password copied to clipboard!')\n                                    }}>\n                                        Copy Password\n                                    </PasswordGeneratorCopyPasswordBtn>\n                                </PasswordGeneratorResultP>\n                                : <div></div>\n                        }\n                    </PasswordGeneratorResultDiv>\n                </PasswordGeneratorContainer>\n                <Toast toastStyle={{ textAlign: \"center\", color: \"white\", backgroundColor: \"green\" }} />\n            </>\n        );\n    }\n}\n\nexport default PasswordGenerator;","import styled from 'styled-components';\nimport { Link as LinkRouter } from 'react-router-dom';\nimport { FaTimes } from 'react-icons/fa';\n\nexport const SidebarContainer = styled.aside`\n    position: fixed;\n    z-index: 999;\n    width: 100%;\n    height: 100%;\n    background: white;\n    display: grid;\n    align-items: center;\n    top: 0;\n    left: 0;\n    transition: 0.3s ease-in-out;\n\n    opacity: ${({ isSidebar }) => (isSidebar ? '100%' : '0')};\n    top: ${({ isSidebar }) => (isSidebar ? '0' : '-100%')};\n\n    /* top: 0; */\n`;\n\nexport const Icon = styled.div`\n    position: absolute;\n    top: 1.2rem;\n    right: 1.5rem;\n    background: transparent;\n    font-size: 2rem;\n    cursor: pointer;\n    outline: none;\n`;\n\nexport const CloseIcon = styled(FaTimes)`\n    color: #000;\n    &:hover {\n        transition: all 0.2s ease-in-out;\n        color: #15cdfc;\n    }    \n`;\n\nexport const SidebarDiv = styled.div`\n    color: #fff;\n`;\n\nexport const SidebarUl = styled.ul`\n    display: grid;\n    grid-template-columns: 1fr;\n    //grid-template-rows: repeat(3,90px);\n    grid-template-rows: repeat(4,120px);\n    text-align: center;\n\n    @media screen and (max-width: 480px){\n        //grid-template-rows: repeat(3,90px);\n        grid-template-rows: repeat(4,120px);\n    }\n`;\n\nexport const SidebarLinkRouter = styled(LinkRouter)`\n    border-radius: 50px;\n    background: white;\n    white-space: nowrap;\n    padding: 16px 64px;\n    color: black;\n    font-size: 24px;\n    outline: none;\n    border: none;\n    cursor: pointer\n    transition: all 0.2s ease-in-out;\n    text-decoration: none;\n\n    &:hover {\n        transition: all 0.2s ease-in-out;\n        color: #15cdfc;\n    }\n`;\n\nexport const SidebarBtnDiv = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n\nexport const SidebarBtnLinkRouter = styled(LinkRouter)`\n    color: #fff;\n    background: #000;\n    border-radius: 50px;\n    white-space: nowrap;\n    padding: 16px 64px;\n    font-size: 16px;\n    outline: none;\n    border: none;\n    cursor: pointer\n    transition: all 0.2s ease-in-out;\n    text-decoration: none;\n\n    &:hover {\n        color: #000;\n        background: #15cdfc;\n        transition: all 0.2s ease-in-out;\n    }\n`;","import React, { Component } from 'react'\nimport { asPath, capitalizeName } from '../../utils';\nimport {\n    CALC,\n    CONTACT,\n    GEN,\n    HOME,\n    NET,\n    NET_CALC,\n    PASSWD,\n    PASSWORD_GENERATOR,\n} from '../../constants/GeneralConstants';\nimport {\n    CloseIcon,\n    Icon,\n    SidebarContainer,\n    SidebarDiv,\n    SidebarUl,\n    SidebarLinkRouter\n} from './SidebarElements';\n\nclass Sidebar extends Component {\n    render() {\n\n        const { isSidebar, toggle } = this.props;\n\n        return (\n            <SidebarContainer isSidebar={isSidebar} onClick={toggle}>\n                <Icon onclick={toggle}>\n                    <CloseIcon />\n                </Icon>\n                <SidebarDiv>\n                    <SidebarUl>\n                        <SidebarLinkRouter to={asPath(HOME)}>{capitalizeName(HOME)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(NET_CALC)}>{capitalizeName(NET)} {capitalizeName(CALC)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(PASSWORD_GENERATOR)}>{capitalizeName(PASSWD)} {capitalizeName(GEN)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(CONTACT)}>{capitalizeName(CONTACT)}</SidebarLinkRouter>\n                    </SidebarUl>\n                </SidebarDiv>\n                {/*\n                <SidebarBtnDiv>\n                    <SidebarBtnLinkRouter to={asPath(SIGN_IN)}>{capitalizeName(SIGN)} {capitalizeName(IN)}</SidebarBtnLinkRouter>\n                </SidebarBtnDiv>\n                */}\n            </SidebarContainer>\n        )\n    }\n}\n\nexport default Sidebar;","import styled from 'styled-components';\n\nexport const NetworkCalculatorContainer = styled.div`\n    max-width: 400px;\n    margin: 50px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const NetworkCalculatorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const NetworkCalculatorInputGroup = styled.div`\n    margin-bottom: 20px;\n`;\n\nexport const NetworkCalculatorInputGroupLabel = styled.div`\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n`;\n\nexport const NetworkCalculatorInputGroupInput = styled.input`\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 1em;\n`;\n\nexport const NetworkCalculatorRow = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const NetworkCalculatorColumnLeftBtn = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n`;\n\nexport const NetworkCalculatorColumnRightBtn = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;\n\nexport const NetworkCalculatorBtnNetData = styled.button`\n    background-color: #007bff;\n    color: #fff;\n    min-width: 120px;\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n    \n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #15cdfc;\n    }\n`;\n\nexport const NetworkCalculatorBtnReset = styled.button`\n    background-color: #ff4c4c;\n    color: #fff;\n    min-width: 120px;\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #f96e5a;\n    }\n`;\n\nexport const NetworkCalculatorRowNetData = styled.div`\n    display: flex;\n    align-items: center;\n    //justify-content: center;\n`;\n\nexport const NetworkCalculatorColumnLeftNetData = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n`;\n\nexport const NetworkCalculatorColumnRightNetData = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;\n\nexport const NetworkCalculatorH1Result = styled.h3`\n    text-align: center;\n    margin-bottom: 12px;\n`;\n\nexport const NetworkCalculatorDivResult = styled.div`\n    display: flex;\n    flex-direction: column;   \n    text-align: center;\n`;\n\nexport const NetworkCalculatorRowResult = styled.div`\n    display: flex;\n    align-items: center;   \n`;\n\nexport const NetworkCalculatorColumnLeftResult = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n    font-weight: bold;\n`;\n\nexport const NetworkCalculatorColumnRightResult = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;","import React, { Component } from 'react';\nimport { capitalizeName } from '../../utils';\n//import './NetworkCalculator.css'; // Import the CSS file for styling\nimport {\n    NetworkCalculatorColumnLeftBtn,\n    NetworkCalculatorColumnLeftResult,\n    NetworkCalculatorColumnRightBtn,\n    NetworkCalculatorColumnRightResult,\n    NetworkCalculatorContainer,\n    NetworkCalculatorDivResult,\n    NetworkCalculatorH1,\n    NetworkCalculatorH1Result,\n    NetworkCalculatorInputGroup,\n    NetworkCalculatorInputGroupInput,\n    NetworkCalculatorInputGroupLabel,\n    NetworkCalculatorBtnNetData,\n    NetworkCalculatorBtnReset,\n    NetworkCalculatorRow,\n    NetworkCalculatorRowResult,\n} from './NetworkCalculatorElements';\nimport { CALCULATOR, DATA, DEFAULT_CIDR, DEFAULT_IP_ADDRESS, NET, NETWORK, RESET } from '../../constants/GeneralConstants';\n\nclass NetCalculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ipAddress: DEFAULT_IP_ADDRESS,\n            cidr: DEFAULT_CIDR,\n            networkAddress: '',\n            broadcastAddress: '',\n            firstUsableHost: '',\n            lastUsableHost: '',\n            totalHosts: '',\n            usableHosts: '',\n            subnetMask: '',\n            wildcardMask: '',\n            binaryNetmask: '',\n            cidrNotation: ''\n        };\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    calculateNetInfo = () => {\n        const { ipAddress, cidr } = this.state;\n        const ipParts = ipAddress.split('.').map(Number);\n        const cidrValue = parseInt(cidr, 10);\n\n        if (ipParts.length !== 4 || cidrValue < 0 || cidrValue > 32) {\n            alert('Invalid IP address or CIDR value');\n            return;\n        }\n\n        const subnetMask = (0xffffffff << (32 - cidrValue)) >>> 0;\n        const wildcardMask = ~subnetMask & 0xffffffff;\n        const ipAddressInt = (ipParts[0] << 24) | (ipParts[1] << 16) | (ipParts[2] << 8) | ipParts[3];\n        const networkAddress = ipAddressInt & subnetMask;\n        const broadcastAddress = networkAddress | ~subnetMask;\n        const firstUsableHost = networkAddress + 1;\n        const lastUsableHost = broadcastAddress - 1;\n        const totalHosts = 2 ** (32 - cidrValue);\n        const usableHosts = totalHosts - 2;\n\n        this.setState({\n            networkAddress: this.ipToString(networkAddress),\n            broadcastAddress: this.ipToString(broadcastAddress),\n            firstUsableHost: this.ipToString(firstUsableHost),\n            lastUsableHost: this.ipToString(lastUsableHost),\n            totalHosts,\n            usableHosts,\n            subnetMask: this.ipToString(subnetMask),\n            wildcardMask: this.ipToString(wildcardMask),\n            binaryNetmask: this.toBinary(subnetMask),\n            cidrNotation: `${ipAddress}/${cidr}`\n        });\n    };\n\n    ipToString = (ip) => {\n        return `${(ip >>> 24) & 0xff}.${(ip >>> 16) & 0xff}.${(ip >>> 8) & 0xff}.${ip & 0xff}`;\n    };\n\n    resetNetInfo = () => {\n        this.setState({\n            ipAddress: DEFAULT_IP_ADDRESS,\n            cidr: DEFAULT_CIDR,\n            networkAddress: '',\n            broadcastAddress: '',\n            firstUsableHost: '',\n            lastUsableHost: '',\n            totalHosts: '',\n            usableHosts: '',\n            subnetMask: '',\n            wildcardMask: '',\n            binaryNetmask: '',\n            cidrNotation: ''\n        });\n    }\n\n    toBinary = (num) => {\n        const binaryString = num.toString(2).padStart(32, '0');\n        return binaryString.match(/.{1,8}/g).join('.');\n    };\n\n    render() {\n        const {\n            ipAddress,\n            cidr,\n            networkAddress,\n            broadcastAddress,\n            firstUsableHost,\n            lastUsableHost,\n            totalHosts,\n            usableHosts,\n            subnetMask,\n            wildcardMask,\n            binaryNetmask,\n            cidrNotation\n        } = this.state;\n\n        return (\n            <>\n                <NetworkCalculatorH1>\n                    {capitalizeName(NETWORK)} {capitalizeName(CALCULATOR)}\n                </NetworkCalculatorH1>\n                <NetworkCalculatorContainer>\n                    <NetworkCalculatorInputGroup>\n                        <NetworkCalculatorInputGroupLabel htmlFor=\"ipAddress\">IP Address:</NetworkCalculatorInputGroupLabel>\n                        <NetworkCalculatorInputGroupInput\n                            type=\"text\"\n                            id=\"ipAddress\"\n                            name=\"ipAddress\"\n                            value={ipAddress}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Enter IP address (e.g., 192.168.1.1)\"\n                        />\n                    </NetworkCalculatorInputGroup>\n                    <NetworkCalculatorInputGroup>\n                        <NetworkCalculatorInputGroupLabel htmlFor=\"cidr\">CIDR:</NetworkCalculatorInputGroupLabel>\n                        <NetworkCalculatorInputGroupInput\n                            type=\"number\"\n                            id=\"cidr\"\n                            name=\"cidr\"\n                            value={cidr}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Enter CIDR (0-32)\"\n                            min=\"0\"\n                            max=\"32\"\n                        />\n                    </NetworkCalculatorInputGroup>\n                    <NetworkCalculatorRow>\n                        <NetworkCalculatorColumnLeftBtn>\n                            <NetworkCalculatorBtnNetData onClick={this.calculateNetInfo}>\n                                {capitalizeName(NET)} {capitalizeName(DATA)}\n                            </NetworkCalculatorBtnNetData>\n                        </NetworkCalculatorColumnLeftBtn>\n                        <NetworkCalculatorColumnRightBtn>\n                            <NetworkCalculatorBtnReset onClick={this.resetNetInfo}>\n                                {capitalizeName(RESET)}\n                            </NetworkCalculatorBtnReset>\n                        </NetworkCalculatorColumnRightBtn>\n                    </NetworkCalculatorRow>\n                </NetworkCalculatorContainer>\n                {networkAddress && (\n                    <NetworkCalculatorDivResult>\n                        <NetworkCalculatorH1Result>{capitalizeName(NETWORK)} {capitalizeName(DATA)}</NetworkCalculatorH1Result>\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Network Address:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{networkAddress}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Broadcast Address:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{broadcastAddress}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>First Usable Host:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{firstUsableHost}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Last Usable Host:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{lastUsableHost}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Total Hosts:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{totalHosts}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Usable Hosts:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{usableHosts}\n                            </NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Subnet Mask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{subnetMask}\n                            </NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Wildcard Mask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{wildcardMask}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Binary Netmask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{binaryNetmask}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>CIDR Notation:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{cidrNotation}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                    </NetworkCalculatorDivResult>\n                )}\n            </>\n        );\n    }\n}\n\nexport default NetCalculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home/home';\n//import AdvancedCalculator from './pages/Calculator/calculator';\nimport Contact from './pages/Contact/contact';\nimport {\n  CONTACT,\n  HOME,\n  NET_CALC,\n  PASSWORD_GENERATOR\n} from './constants/GeneralConstants';\nimport asPath from './utils';\nimport PasswordGenerator from './pages/PasswordGenerator/passwordGenerator';\nimport Sidebar from './components/Sidebar';\nimport NetworkCalculator from './pages/NetworkCalculator/networkCalculator';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isSidebar: false,\n    }\n  }\n\n  toggle = () => {\n    this.state.isSidebar ?\n      this.setState({ isSidebar: false }) :\n      this.setState({ isSidebar: true });\n  }\n\n  render() {\n\n    var { isSidebar } = this.state;\n\n    return (\n      <Router>\n        <Navbar isSidebar={isSidebar} toggle={this.toggle} />\n        <Sidebar isSidebar={isSidebar} toggle={this.toggle} />\n        <Switch>\n          <Route path={asPath(HOME)} exact component={Home} />\n          <Route path={asPath(NET_CALC)} component={NetworkCalculator} />\n          <Route path={asPath(PASSWORD_GENERATOR)} component={PasswordGenerator} />\n          <Route path={asPath(CONTACT)} component={Contact} />\n          {/* <Route path={asPath(SIGN_UP)} component={SignUp} /> */}\n          <Route path=\"*\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
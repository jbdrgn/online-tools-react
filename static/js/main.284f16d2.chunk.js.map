{"version":3,"sources":["images/logo.svg","components/Navbar/NavbarElements.js","utils.js","constants/GeneralConstants.js","components/Navbar/index.js","pages/Calculator/CalculatorElements.js","pages/Calculator/calculator.js","pages/Home/HomeElements.js","pages/Home/home.js","pages/Contact/ContactElements.js","pages/Contact/contact.js","pages/PasswordGenerator/PasswordGeneratorElements.js","pages/PasswordGenerator/passwordGenerator.js","components/Sidebar/SidebarElements.js","components/Sidebar/index.js","pages/NetworkCalculator/NetworkCalculatorElements.js","pages/NetworkCalculator/networkCalculator.js","App.js","index.js"],"names":["module","exports","Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","NavBtn","NavBtnLink","capitalizeName","name","word","toLocaleUpperCase","substring","length","asPath","line","Navbar","toggle","this","props","to","src","require","alt","onClick","activeStyle","color","Component","CalculatorContainer","CalculatorDivDisplay","h1","CalculatorDivButtons","CalculatorButton","button","CalculatorButtonGold","Calculator","handleClick","value","state","display","currentInput","operator","firstOperand","setState","result","parseFloat","toString","isNaN","console","log","Math","sqrt","includes","HomeH1","Home","ContactContainer","ContactEmail","ContactRow","ContactCopyPasswordBtn","Contact","copyToClipboard","email","navigator","clipboard","writeText","then","catch","err","error","showToast","text","toast","success","position","POSITION","TOP_RIGHT","autoClose","closeOnClick","icon","hideProgressBar","process","toastStyle","textAlign","backgroundColor","PasswordGeneratorContainer","PasswordGeneratorH1","PasswordGeneratorRow","PasswordGeneratorColumn","PasswordGeneratorSelectGroup","PasswordGeneratorInputGroup","PasswordGeneratorLabel","label","PasswordGeneratorResultDiv","PasswordGeneratorResultP","strong","p","PasswordGeneratorInputTypeNumber","input","PasswordGeneratorInputTypeCheckbox","PasswordGeneratorBtnGenerate","PasswordGeneratorBtnReset","PasswordGeneratorCopyPasswordBtn","PasswordGenerator","password","generatePassword","charset","isUppercase","isLowercase","isNumbers","isSymbols","i","floor","random","handleChange","event","target","type","checked","newValue","resetPassword","onChange","min","max","SidebarContainer","aside","isSidebar","Icon","CloseIcon","FaTimes","SidebarDiv","SidebarUl","ul","SidebarLinkRouter","LinkRouter","Sidebar","onclick","NetworkCalculatorContainer","NetworkCalculatorH1","NetworkCalculatorInputGroup","NetworkCalculatorInputGroupLabel","NetworkCalculatorInputGroupInput","NetworkCalculatorRow","NetworkCalculatorColumnLeftBtn","NetworkCalculatorColumnRightBtn","NetworkCalculatorBtnNetData","NetworkCalculatorBtnReset","NetworkCalculatorH1Result","h3","NetworkCalculatorDivResult","NetworkCalculatorRowResult","NetworkCalculatorColumnLeftResult","NetworkCalculatorColumnRightResult","NetCalculator","handleInputChange","calculateNetInfo","ipAddress","cidr","ipParts","split","map","Number","cidrValue","parseInt","alert","subnetMask","wildcardMask","networkAddress","broadcastAddress","firstUsableHost","lastUsableHost","totalHosts","usableHosts","ipToString","binaryNetmask","toBinary","cidrNotation","ip","resetNetInfo","num","padStart","match","join","htmlFor","id","placeholder","App","path","exact","component","NetworkCalculator","ReactDOM","render","document","getElementById"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,0jECIpC,IAAMC,EAAMC,IAAOC,IAAV,KAYHC,EAAUF,YAAOG,IAAPH,CAAH,KAUPI,EAAOJ,YAAOK,IAAPL,CAAH,KAeJM,EAAUN,IAAOO,IAAV,KAiBPC,EAASR,IAAOC,IAAV,KAcNQ,EAAaT,YAAOG,IAAPH,CAAH,KCxEvB,SAASU,EAAeC,GACpB,IAAIC,EAAI,UAAMD,GACd,MAAM,GAAN,OAAUC,EAAK,GAAGC,oBAAsBD,EAAKE,UAAU,EAAGF,EAAKG,SAOpD,SAASC,EAAOC,GAC3B,MAAO,IAAMA,ECVV,IC+DQC,E,uKAtCH,IAEAC,EAAWC,KAAKC,MAAhBF,OAER,OACE,oCACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,CAASoB,GAAIN,EDRW,sBCQkBA,EDjBhC,SCkBR,yBAAKO,IAAKC,EAAQ,IAA0BC,IAAI,UAElD,kBAACrB,EAAD,CAAMsB,QAASP,IACf,kBAACb,EAAD,KACE,kBAACJ,EAAD,CAASoB,GAAIN,EDbS,sBCaoBA,EDtBlC,QCsBgDW,YAAa,CAAEC,MDAjD,YCCnBlB,EDvBK,SC0BR,kBAACR,EAAD,CAASoB,GAAIN,EDjBS,sBCiBoBA,EDrB9B,YCqBgDW,YAAa,CAAEC,MDJrD,YCKnBlB,EDvBI,OCsBP,IACyBA,EDzCjB,SC4CR,kBAACR,EAAD,CAASoB,GAAIN,EDrBS,sBCqBoBA,EDlBpB,sBCkBgDW,YAAa,CAAEC,MDR/D,YCSnBlB,EDrBO,UCoBV,IAC4BA,EDnCrB,QCsCP,kBAACR,EAAD,CAASoB,GAAIN,EDzBS,sBCyBoBA,ED5C/B,WC4CgDW,YAAa,CAAEC,MDZpD,YCanBlB,ED7CQ,aCiDb,kBAACF,EAAD,KACE,kBAACC,EAAD,CAAYa,GAAIN,EDvBL,YCuBX,kB,GA/BSa,a,ysDCtBd,IAAMC,EAAsB9B,IAAOO,IAAV,KAcnBwB,GALe/B,IAAOgC,GAAV,KAKWhC,IAAOO,IAAV,MAapB0B,EAAuBjC,IAAOO,IAAV,KAMpB2B,EAAmBlC,IAAOmC,OAAV,KAqBhBC,EAAuBpC,IAAOmC,OAAV,KCgFlBE,E,kDA9HX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IASViB,YAAc,SAACC,GAAW,IAAD,EACqC,EAAKC,MAAvDC,EADa,EACbA,QAASC,EADI,EACJA,aAAcC,EADV,EACUA,SAAUC,EADpB,EACoBA,aAEzC,GAAc,MAAVL,EACA,EAAKM,SAAS,CAAEJ,QAAS,IAAKC,aAAc,GAAIC,SAAU,KAAMC,aAAc,YAC3E,GAAc,MAAVL,GACP,GAAII,GAA6B,OAAjBC,EAAuB,CACnC,IAAIE,EACJ,OAAQH,GACJ,IAAK,IACDG,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,OACL,IAAK,IACL,IAAK,SACL,QACII,EAASJ,EAEjB,EAAKG,SAAS,CAAEJ,QAASK,EAAOE,WAAYN,aAAcI,EAAOE,WAAYL,SAAU,KAAMC,aAAc,aAE5G,GAAc,SAAVL,EACP,EAAKM,SAAS,CACVJ,QAAUC,EAAaO,OAAiC,IAAxBP,EAAa3B,OAAgBwB,EAAQE,EAAUF,EAC/EG,eAA2C,EAA5BK,WAAWL,IAAoBM,WAC9CL,SAAU,OACVC,aAAcF,SAEf,GAAc,MAAVH,EACP,EAAKM,SAAS,CACVJ,QAAUC,EAAaO,OAAiC,IAAxBP,EAAa3B,OAAgBwB,EAAQE,EAAUF,EAC/EG,cAAeK,WAAWL,GAAgB,KAAKM,WAC/CL,SAAU,IACVC,aAAcF,SAEf,GAAc,WAAVH,EACPW,QAAQC,IAAIT,GACZ,EAAKG,SAAS,CACVJ,QAAUC,EAAaO,OAAiC,IAAxBP,EAAa3B,OAAgBwB,EAAQE,EAAUF,EAC/EG,aAAcU,KAAKC,KAAKN,WAAWL,IAAeM,WAClDL,SAAU,SACVC,aAAcF,SAEf,GAAI,CAAC,IAAK,IAAK,IAAK,KAAKY,SAASf,GACrC,GAAqB,OAAjBK,EACA,EAAKC,SAAS,CAAEJ,QAASA,EAAUF,EAAOK,aAAcF,EAAcC,SAAUJ,EAAOG,aAAc,SAClG,CACH,IAAII,EACJ,OAAQH,GACJ,IAAK,IACDG,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,IAAK,IACDI,EAASC,WAAWH,GAAgBG,WAAWL,GAC/C,MACJ,QACII,EAASJ,EAEjB,EAAKG,SAAS,CAAEJ,QAASA,EAAUF,EAAOK,aAAcE,EAAOE,WAAYL,SAAUJ,EAAOG,aAAc,SAG9F,MAAZD,EACA,EAAKI,SAAS,CAAEJ,QAASF,EAAOG,aAAcH,IAE9C,EAAKM,SAAS,CAAEJ,QAASA,EAAUF,EAAOG,aAAcA,EAAeH,KAtF/E,EAAKC,MAAQ,CACTC,QAAS,IACTC,aAAc,GACdC,SAAU,KACVC,aAAc,MANH,E,qDA6FT,IAAD,OACL,OACI,oCACI,kBAACd,EAAD,KACI,kBAACC,EAAD,KAAuBX,KAAKoB,MAAMC,SAClC,kBAACR,EAAD,KACI,kBAACC,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,UAAlD,QACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,YAAtD,UACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACJ,EAAD,CAAkBR,QAAS,kBAAM,EAAKY,YAAY,OAAlD,KACA,kBAACF,EAAD,CAAsBV,QAAS,kBAAM,EAAKY,YAAY,OAAtD,Y,GAvHCT,a,uHCPlB,IAAM0B,EAASvD,IAAOgC,GAAV,KCaJwB,E,uKATX,OACE,oCACE,kBAACD,EAAD,gCACA,kBAAC,EAAD,W,GALW1B,a,ygCCFZ,IAAM4B,EAAmBzD,IAAOO,IAAV,KAShBmD,EAAe1D,IAAOgC,GAAV,KAWZ2B,EAAa3D,IAAOO,IAAV,KAMVqD,GAAyB5D,IAAOmC,OAAV,KCwCpB0B,G,kDAlDb,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IAIRyC,gBAAkB,WAAO,IACfC,EAAU,EAAKvB,MAAfuB,MACRC,UAAUC,UAAUC,UAAUH,GAAOI,MAAK,WACxCjB,QAAQC,IAAI,iCAEXiB,OAAM,SAAAC,GACPnB,QAAQoB,MAAM,mBAAoBD,OAXnB,EAgBnBE,UAAY,SAACC,GACXC,IAAMC,QACJ,6BAAMF,GACN,CACEG,SAAUF,IAAMG,SAASC,UACzBC,UP9B+B,KO+B/BC,cAAc,EACdC,MAAM,EACNC,iBAAiB,KAtBrB,EAAKzC,MAAQ,CAAEuB,MAAOmB,oBAFL,E,qDA6BT,IAAD,OACCnB,EAAU3C,KAAKoB,MAAfuB,MACR,OACE,oCACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KAAeK,GACf,kBAACJ,EAAD,KACE,kBAACC,GAAD,CAAwBlC,QAAS,WAC/B,EAAKoC,kBACL,EAAKS,UAAU,gCAEd7D,EPtDK,QOkDR,IAI0BA,EPhDjB,YOoDb,kBAAC,IAAD,CAAOyE,WAAY,CAAEC,UAAW,SAAUxD,MAAO,QAASyD,gBAAiB,gB,GA9C7DxD,a,w6FCdf,IAAMyD,GAA6BtF,IAAOO,IAAV,MAU1BgF,GAAsBvF,IAAOgC,GAAV,MAKnBwD,GAAuBxF,IAAOO,IAAV,MAIpBkF,GAA0BzF,IAAOO,IAAV,MAIvBmF,GAA+B1F,IAAOO,IAAV,MAO5BoF,GAA8B3F,IAAOO,IAAV,MAI3BqF,GAAyB5F,IAAO6F,MAAV,MAMtBC,GAA6B9F,IAAOO,IAAV,MAW1BwF,IANgC/F,IAAOgG,OAAV,MAMFhG,IAAOiG,EAAV,OAMxBC,GAAmClG,IAAOmG,MAAV,MAShCC,GAAqCpG,IAAOmG,MAAV,MAIlCE,GAA+BrG,IAAOmC,OAAV,MAmB5BmE,GAA4BtG,IAAOmC,OAAV,MAkBzBoE,GAAmCvG,IAAOmC,OAAV,MCmH9BqE,G,kDA3LX,WAAYnF,GAAQ,IAAD,8BACf,cAAMA,IAWVyC,gBAAkB,WAAO,IACb2C,EAAa,EAAKjE,MAAlBiE,SACRzC,UAAUC,UAAUC,UAAUuC,GAAUtC,MAAK,WACzCjB,QAAQC,IAAI,oCAEbiB,OAAM,SAAAC,GACLnB,QAAQoB,MAAM,mBAAoBD,OAlBvB,EAuBnBqC,iBAAmB,WAAO,IAAD,EAC8C,EAAKlE,MAAhEzB,EADa,EACbA,OACJ4F,EAAU,GAMd,GARqB,EACLC,cAECD,GT5BK,8BSyBD,EACQE,cAGZF,GT9CK,8BS0CD,EACqBG,YAI3BH,GT1CK,cSqCC,EACgCI,YAKtCJ,GThCK,iCSkCG,IAAnBA,EAAQ5F,OACR,MAAO,4CAIX,IADA,IAAI0F,EAAW,GACNO,EAAI,EAAGA,EAAIjG,EAAQiG,IAAK,CAE7BP,GAAYE,EADQvD,KAAK6D,MAAM7D,KAAK8D,SAAWP,EAAQ5F,SAI3D,EAAK8B,SAAS,CAAE4D,cAzCD,EA4CnBU,aAAe,SAACC,GAAW,IAAD,EACiBA,EAAMC,OAArC1G,EADc,EACdA,KAAM4B,EADQ,EACRA,MAAO+E,EADC,EACDA,KAAMC,EADL,EACKA,QACrBC,EThFU,aSgFCF,EAAoBC,EAAUhF,EAC/C,EAAKM,SAAL,gBAAiBlC,EAAO6G,KA/CT,EAmDnBC,cAAgB,WAEZ,EAAK5E,SAAS,CAAE4D,SADD,MApDA,EAwDnBlC,UAAY,SAACC,GACTC,IAAMC,QACF,6BAAMF,GACN,CACIG,SAAUF,IAAMG,SAASC,UACzBC,UTzFuB,KS0FvBC,cAAc,EACdC,MAAM,EACNC,iBAAiB,KA9DzB,EAAKzC,MAAQ,CACTiE,SAAU,GACV1F,OAAQ,GACR6F,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,WAAW,GARA,E,qDAqET,IAAD,OACL,OACI,oCACI,kBAACxB,GAAD,KACK7E,ETpFG,YSmFR,IACgCA,EThGvB,cSkGT,kBAAC4E,GAAD,KACI,kBAACI,GAAD,KACI,kBAACE,GAAD,6BAGI,kBAACM,GAAD,CACIoB,KThGV,SSiGU3G,KTtGV,SSuGU4B,MAAOnB,KAAKoB,MAAMzB,OAClB2G,SAAUtG,KAAK+F,aACfQ,IAAI,IACJC,IAAI,UAKhB,kBAACpC,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTlIhB,WSmIgB3G,KAAK,cACL4G,QAASnG,KAAKoB,MAAMoE,YACpBc,SAAUtG,KAAK+F,eALvB,4BAaR,kBAAC1B,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTjJhB,WSkJgB3G,KAAK,cACL4G,QAASnG,KAAKoB,MAAMqE,YACpBa,SAAUtG,KAAK+F,eALvB,6BAcZ,kBAAC3B,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTlKhB,WSmKgB3G,KAAK,YACL4G,QAASnG,KAAKoB,MAAMsE,UACpBY,SAAUtG,KAAK+F,eALvB,0BAaR,kBAAC1B,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACQ,GAAD,CACIkB,KTjLhB,WSkLgB3G,KAAK,YACL4G,QAASnG,KAAKoB,MAAMuE,UACpBW,SAAUtG,KAAK+F,eALvB,2BAcZ,kBAACd,GAAD,CAA8B3E,QAASN,KAAKsF,kBACvChG,ETrLD,YSoLJ,IACgCA,ETvK5B,aS0KJ,kBAAC4F,GAAD,CAA2B5E,QAASN,KAAKqG,eACpC/G,ETzKJ,US4KD,kBAACoF,GAAD,KAEQ1E,KAAKoB,MAAMiE,SACP,kBAACV,GAAD,KACKrF,ET/LZ,aS8LO,IACiCA,ETlLzC,YSiLQ,IAEI,6BACCU,KAAKoB,MAAMiE,SACZ,kBAACF,GAAD,CAAkC7E,QAAS,WACvC,EAAKoC,kBACL,EAAKS,UAAU,mCAFnB,kBAOF,gCAIlB,kBAAC,IAAD,CAAOY,WAAY,CAAEC,UAAW,SAAUxD,MAAO,QAASyD,gBAAiB,gB,GAtL3DxD,a,msEChCzB,IAAMgG,GAAmB7H,IAAO8H,MAAV,MAYd,qBAAGC,UAA6B,OAAS,OAC7C,qBAAGA,UAA6B,IAAM,WAKpCC,GAAOhI,IAAOO,IAAV,MAUJ0H,GAAYjI,YAAOkI,IAAPlI,CAAH,MAQTmI,GAAanI,IAAOO,IAAV,MAIV6H,GAAYpI,IAAOqI,GAAV,MAaTC,GAAoBtI,YAAOuI,IAAPvI,CAAH,MCPfwI,ID0BcxI,IAAOO,IAAV,MAKUP,YAAOuI,IAAPvI,CAAH,M,uKC1DnB,IAAD,EAEyBoB,KAAKC,MAA3B0G,EAFH,EAEGA,UAAW5G,EAFd,EAEcA,OAEnB,OACI,kBAAC0G,GAAD,CAAkBE,UAAWA,EAAWrG,QAASP,GAC7C,kBAAC6G,GAAD,CAAMS,QAAStH,GACX,kBAAC8G,GAAD,OAEJ,kBAACE,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,CAAmBhH,GAAIN,EXVb,sBWU0CA,EXnBxD,SWmBuEN,EXnBvE,SWoBI,kBAAC4H,GAAD,CAAmBhH,GAAIN,EXXb,sBWW0CA,EXfpD,aWeuEN,EXhB5E,OWgBK,IAA6FA,EXlCjG,SWmCI,kBAAC4H,GAAD,CAAmBhH,GAAIN,EXZb,sBWY0CA,EXT1C,uBWSuEN,EXXnF,UWWE,IAA0GA,EXzB/G,QW0BK,kBAAC4H,GAAD,CAAmBhH,GAAIN,EXbb,sBWa0CA,EXhCrD,YWgCuEN,EXhCvE,mB,GWiBDmB,c,8+FCpBf,IAAM6G,GAA6B1I,IAAOO,IAAV,MAU1BoI,GAAsB3I,IAAOgC,GAAV,MAKnB4G,GAA8B5I,IAAOO,IAAV,MAI3BsI,GAAmC7I,IAAOO,IAAV,MAMhCuI,GAAmC9I,IAAOmG,MAAV,MAQhC4C,GAAuB/I,IAAOO,IAAV,MAKpByI,GAAiChJ,IAAOO,IAAV,MAM9B0I,GAAkCjJ,IAAOO,IAAV,MAM/B2I,GAA8BlJ,IAAOmC,OAAV,MAgB3BgH,GAA4BnJ,IAAOmC,OAAV,MAkCzBiH,IAlB8BpJ,IAAOO,IAAV,MAMUP,IAAOO,IAAV,MAMIP,IAAOO,IAAV,MAMPP,IAAOqJ,GAAV,OAKzBC,GAA6BtJ,IAAOO,IAAV,MAM1BgJ,GAA6BvJ,IAAOO,IAAV,MAK1BiJ,GAAoCxJ,IAAOO,IAAV,MAOjCkJ,GAAqCzJ,IAAOO,IAAV,MCwGhCmJ,G,kDA9MX,WAAYrI,GAAQ,IAAD,8BACf,cAAMA,IAiBVsI,kBAAoB,SAACvC,GAAW,IAAD,EACHA,EAAMC,OAAtB1G,EADmB,EACnBA,KAAM4B,EADa,EACbA,MACd,EAAKM,SAAL,gBACKlC,EAAO4B,KArBG,EAyBnBqH,iBAAmB,WAAO,IAAD,EACO,EAAKpH,MAAzBqH,EADa,EACbA,UAAWC,EADE,EACFA,KACbC,EAAUF,EAAUG,MAAM,KAAKC,IAAIC,QACnCC,EAAYC,SAASN,EAAM,IAEjC,GAAuB,IAAnBC,EAAQhJ,QAAgBoJ,EAAY,GAAKA,EAAY,GACrDE,MAAM,wCADV,CAKA,IAAMC,EAAc,YAAe,GAAKH,IAAgB,EAClDI,EAA6B,YAAbD,EAEhBE,GADgBT,EAAQ,IAAM,GAAOA,EAAQ,IAAM,GAAOA,EAAQ,IAAM,EAAKA,EAAQ,IACrDO,EAChCG,EAAmBD,GAAkBF,EACrCI,EAAkBF,EAAiB,EACnCG,EAAiBF,EAAmB,EACpCG,EAAU,SAAG,EAAM,GAAKT,GACxBU,EAAcD,EAAa,EAEjC,EAAK/H,SAAS,CACV2H,eAAgB,EAAKM,WAAWN,GAChCC,iBAAkB,EAAKK,WAAWL,GAClCC,gBAAiB,EAAKI,WAAWJ,GACjCC,eAAgB,EAAKG,WAAWH,GAChCC,aACAC,cACAP,WAAY,EAAKQ,WAAWR,GAC5BC,aAAc,EAAKO,WAAWP,GAC9BQ,cAAe,EAAKC,SAASV,GAC7BW,aAAa,GAAD,OAAKpB,EAAL,YAAkBC,OAvDnB,EA2DnBgB,WAAa,SAACI,GACV,MAAM,GAAN,OAAWA,IAAO,GAAM,IAAxB,YAAiCA,IAAO,GAAM,IAA9C,YAAuDA,IAAO,EAAK,IAAnE,YAAgF,IAALA,IA5D5D,EA+DnBC,aAAe,WACX,EAAKtI,SAAS,CACVgH,UbhFsB,caiFtBC,KblFgB,KamFhBU,eAAgB,GAChBC,iBAAkB,GAClBC,gBAAiB,GACjBC,eAAgB,GAChBC,WAAY,GACZC,YAAa,GACbP,WAAY,GACZC,aAAc,GACdQ,cAAe,GACfE,aAAc,MA5EH,EAgFnBD,SAAW,SAACI,GAER,OADqBA,EAAIpI,SAAS,GAAGqI,SAAS,GAAI,KAC9BC,MAAM,WAAWC,KAAK,MAhF1C,EAAK/I,MAAQ,CACTqH,UblBsB,camBtBC,KbpBgB,KaqBhBU,eAAgB,GAChBC,iBAAkB,GAClBC,gBAAiB,GACjBC,eAAgB,GAChBC,WAAY,GACZC,YAAa,GACbP,WAAY,GACZC,aAAc,GACdQ,cAAe,GACfE,aAAc,IAdH,E,qDAqFT,IAAD,EAcD7J,KAAKoB,MAZLqH,EAFC,EAEDA,UACAC,EAHC,EAGDA,KACAU,EAJC,EAIDA,eACAC,EALC,EAKDA,iBACAC,EANC,EAMDA,gBACAC,EAPC,EAODA,eACAC,EARC,EAQDA,WACAC,EATC,EASDA,YACAP,EAVC,EAUDA,WACAC,EAXC,EAWDA,aACAQ,EAZC,EAYDA,cACAE,EAbC,EAaDA,aAGJ,OACI,oCACI,kBAACtC,GAAD,KACKjI,Eb1GE,WayGP,IAC+BA,Eb7HrB,ea+HV,kBAACgI,GAAD,KACI,kBAACE,GAAD,KACI,kBAACC,GAAD,CAAkC2C,QAAQ,aAA1C,eACA,kBAAC1C,GAAD,CACIxB,KAAK,OACLmE,GAAG,YACH9K,KAAK,YACL4B,MAAOsH,EACPnC,SAAUtG,KAAKuI,kBACf+B,YAAY,0CAGpB,kBAAC9C,GAAD,KACI,kBAACC,GAAD,CAAkC2C,QAAQ,QAA1C,SACA,kBAAC1C,GAAD,CACIxB,KAAK,SACLmE,GAAG,OACH9K,KAAK,OACL4B,MAAOuH,EACPpC,SAAUtG,KAAKuI,kBACf+B,YAAY,oBACZ/D,IAAI,IACJC,IAAI,QAGZ,kBAACmB,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,CAA6BxH,QAASN,KAAKwI,kBACtClJ,Eb1Id,OayIS,IAC2BA,EbvJnC,Ua0JI,kBAACuI,GAAD,KACI,kBAACE,GAAD,CAA2BzH,QAASN,KAAK+J,cACpCzK,EbtIZ,aa2IJ8J,GACG,kBAAClB,GAAD,KACI,kBAACF,GAAD,KAA4B1I,EbpJ7B,WaoJC,IAAsDA,EbnK1D,SaoKI,kBAAC6I,GAAD,KACI,kBAACC,GAAD,yBACA,kBAACC,GAAD,KAAqCe,IAGzC,kBAACjB,GAAD,KACI,kBAACC,GAAD,2BACA,kBAACC,GAAD,KAAqCgB,IAGzC,kBAAClB,GAAD,KACI,kBAACC,GAAD,2BACA,kBAACC,GAAD,KAAqCiB,IAGzC,kBAACnB,GAAD,KACI,kBAACC,GAAD,0BACA,kBAACC,GAAD,KAAqCkB,IAGzC,kBAACpB,GAAD,KACI,kBAACC,GAAD,qBACA,kBAACC,GAAD,KAAqCmB,IAGzC,kBAACrB,GAAD,KACI,kBAACC,GAAD,sBACA,kBAACC,GAAD,KAAqCoB,IAIzC,kBAACtB,GAAD,KACI,kBAACC,GAAD,qBACA,kBAACC,GAAD,KAAqCa,IAIzC,kBAACf,GAAD,KACI,kBAACC,GAAD,uBACA,kBAACC,GAAD,KAAqCc,IAGzC,kBAAChB,GAAD,KACI,kBAACC,GAAD,wBACA,kBAACC,GAAD,KAAqCsB,IAGzC,kBAACxB,GAAD,KACI,kBAACC,GAAD,uBACA,kBAACC,GAAD,KAAqCwB,U,GArMrCpJ,aCiCb8J,G,kDAlCb,aAAe,IAAD,8BACZ,gBAMFxK,OAAS,WACP,EAAKqB,MAAMuF,UACT,EAAKlF,SAAS,CAAEkF,WAAW,IAC3B,EAAKlF,SAAS,CAAEkF,WAAW,KAR7B,EAAKvF,MAAQ,CACXuF,WAAW,GAHD,E,qDAaJ,IAEFA,EAAc3G,KAAKoB,MAAnBuF,UAEN,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQA,UAAWA,EAAW5G,OAAQC,KAAKD,SAC3C,kBAAC,GAAD,CAAS4G,UAAWA,EAAW5G,OAAQC,KAAKD,SAC5C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyK,KAAM5K,EdnBW,sBcmBkBA,Ed5BhC,Qc4B8C6K,OAAK,EAACC,UAAWtI,IACzE,kBAAC,IAAD,CAAOoI,KAAM5K,EdpBW,sBcoBkBA,EdxB5B,YcwB8C8K,UAAWC,KACvE,kBAAC,IAAD,CAAOH,KAAM5K,EdrBW,sBcqBkBA,EdlBlB,sBckB8C8K,UAAWtF,KACjF,kBAAC,IAAD,CAAOoF,KAAM5K,EdtBW,sBcsBkBA,EdzC7B,WcyC8C8K,UAAWjI,KAEtE,kBAAC,IAAD,CAAO+H,KAAK,IAAIE,UAAWtI,U,GA7BnB3B,aCdlBmK,IAASC,OAEP,kBAAC,GAAD,MAEAC,SAASC,eAAe,W","file":"static/js/main.284f16d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bf09acc3.svg\";","import { FaBars } from 'react-icons/fa';\nimport { NavLink as Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Nav = styled.nav`\n  background: #000;\n  height: 80px;\n  display: flex;\n  justify-content: space-between;\n  padding: 0.5rem calc((100vw - 1000px) / 2);\n  z-index: 10;\n\n  /* Third Nav */\n  /* justify-content: flex-start; */\n`;\n\nexport const NavLink = styled(Link)`\n  color: #fff;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n`;\n\nexport const Bars = styled(FaBars)`\n  display: none;\n  color: #fff;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(-100%, 75%);\n    font-size: 1.8rem;\n    cursor: pointer;\n  }\n`;\n\nexport const NavMenu = styled.div`\n  display: flex;\n  align-items: center;\n  margin-right: -24px;\n\n  /* Second Nav */\n  /* margin-right: 24px; */\n\n  /* Third Nav */\n  /* width: 100vw;\n  white-space: nowrap; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtn = styled.nav`\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n\n  /* Third Nav */\n  /* justify-content: flex-end;\n  width: 100vw; */\n\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtnLink = styled(Link)`\n  border-radius: 4px;\n  //background: #256ce1;\n  background: #000;\n  padding: 10px 22px;\n  //color: #fff;\n  color: #000;\n  outline: none;\n  border: none;\n  //cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;  \n\n  pointer-events: none;\n\n  /* Second Nav */\n  margin-left: 24px;\n\n  /*\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    //background: #fff;\n    background: #000;\n    //color: #010606;\n    color: #000;\n  }\n  */\n`;\n","function capitalizeName(name) {\n    var word = `${name}`;\n    return `${word[0].toLocaleUpperCase() + word.substring(1, word.length)}`\n}\n\nfunction trimLine(line) {\n    return line.replace(\" \", \"\");\n}\n\nexport default function asPath(line) {\n    return \"/\" + line;\n}\n\nexport { asPath, capitalizeName, trimLine };","export const ABOUT = \"about\";\nexport const CALC = \"calc\";\nexport const CALCULATOR = \"calculator\";\nexport const CHECKBOX = \"checkbox\";\nexport const COPY = \"copy\";\nexport const CONTACT = \"contact\";\nexport const DATA = \"data\"\nexport const DEFAULT_CIDR = \"24\"\nexport const DEFAULT_IP_ADDRESS = \"192.168.1.1\"\nexport const DEFAULT_TOAST_AUTOCLOSE = 1500\nexport const EMAIL = \"email\";\nexport const GEN = \"gen\";\nexport const GENERATE = \"generate\";\nexport const GENERATED = \"generated\";\nexport const GENERATOR = \"generator\";\nexport const HOME = \"home\";\nexport const IN = \"in\";\nexport const LENGTH = \"length\";\nexport const LOWERCASE_LIST = 'abcdefghijklmnopqrstuvwxyz';\nexport const NET = 'net';\nexport const NET_CALC = 'net-calc';\nexport const NETWORK = 'network';\nexport const NUMBER = 'number';\nexport const NUMBERS_LIST = '0123456789';\nexport const ONLINE_TOOLS_REACT = \"online-tools-react\"\nexport const PASSWD = \"passwd\";\nexport const PASSWORD = \"password\";\nexport const PASSWORD_GENERATOR = \"password-generator\";\nexport const RESET = \"reset\";\nexport const ROOT = \"/\";\nexport const SERVICES = \"services\";\nexport const SIGN = \"sign\";\nexport const SIGN_IN = \"sign-in\";\nexport const SIGN_UP = \"sign-up\";\nexport const SYMBOLS_LIST = '!@#$%^&*()_+~`|}{[]:;<>?,./-=';\nexport const UPPERCASE_LIST = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nexport const MAIN_BLUE_HEX_CODE = \"#15cdfc\";","import React, { Component } from 'react';\nimport {\n  Nav,\n  NavLink,\n  Bars,\n  NavBtn,\n  NavBtnLink,\n  NavMenu,\n} from './NavbarElements';\nimport { asPath, capitalizeName } from '../../utils';\nimport {\n  CALC,\n  CONTACT,\n  GEN,\n  HOME,\n  MAIN_BLUE_HEX_CODE,\n  NET,\n  NET_CALC,\n  ONLINE_TOOLS_REACT,\n  PASSWD,\n  PASSWORD_GENERATOR,\n  SIGN_IN\n} from '../../constants/GeneralConstants';\n\nclass Navbar extends Component {\n  render() {\n\n    const { toggle } = this.props;\n\n    return (\n      <>\n        <Nav>\n          <NavLink to={asPath(ONLINE_TOOLS_REACT) + asPath(HOME)}>\n            <img src={require('../../images/logo.svg')} alt='logo' />\n          </NavLink>\n          <Bars onClick={toggle} />\n          <NavMenu>\n            <NavLink to={asPath(ONLINE_TOOLS_REACT) + asPath(HOME)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(HOME)}\n            </NavLink>\n\n            <NavLink to={asPath(ONLINE_TOOLS_REACT) + asPath(NET_CALC)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(NET)} {capitalizeName(CALC)}\n            </NavLink>\n\n            <NavLink to={asPath(ONLINE_TOOLS_REACT) + asPath(PASSWORD_GENERATOR)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(PASSWD)} {capitalizeName(GEN)}\n            </NavLink>\n\n            <NavLink to={asPath(ONLINE_TOOLS_REACT) + asPath(CONTACT)} activeStyle={{ color: MAIN_BLUE_HEX_CODE }}>\n              {capitalizeName(CONTACT)}\n            </NavLink>\n          </NavMenu>\n\n          <NavBtn>\n            <NavBtnLink to={asPath(SIGN_IN)}>Sign In</NavBtnLink>\n          </NavBtn>\n        </Nav>\n      </>\n    );\n  }\n}\n\nexport default Navbar;\n","import styled from 'styled-components';\n\nexport const CalculatorContainer = styled.div`\n    background-color: #333;\n    padding: 20px;\n    border-radius: 10px;\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\n    width: 300px;\n    margin: 50px auto;\n`;\n\nexport const CalculatorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const CalculatorDivDisplay = styled.div`\n    background-color: #222;\n    color: #fff;\n    font-size: 2em;\n    text-align: right;\n    padding: 20px;\n    border-radius: 5px;\n    margin-bottom: 10px;\n    overflow: hidden;\n    white-space: nowrap;\n`;\n\n\nexport const CalculatorDivButtons = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 10px;\n`;\n\nexport const CalculatorButton = styled.button`\n    background-color: #555;\n    color: #fff;\n    font-size: 1.2em;\n    border: none;\n    border-radius: 5px;\n    padding: 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:active {\n        transition: all 0.1s ease-in-out;\n        background-color: #444;\n    }\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #777;\n    }\n`;\n\nexport const CalculatorButtonGold = styled.button`\n    background-color: #e39e2e;\n    color: #fff;\n    font-size: 1.2em;\n    border: none;\n    border-radius: 5px;\n    padding: 15px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:active {\n        transition: all 0.1s ease-in-out;\n        background-color: #444;\n    }\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #f9cd69;\n    }\n`;","import React, { Component } from 'react';\nimport {\n    CalculatorButton,\n    CalculatorButtonGold,\n    CalculatorContainer,\n    CalculatorDivButtons,\n    CalculatorDivDisplay\n} from './CalculatorElements';\n\nclass Calculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            display: '0',\n            currentInput: '',\n            operator: null,\n            firstOperand: null,\n        };\n    }\n\n    handleClick = (value) => {\n        const { display, currentInput, operator, firstOperand } = this.state;\n\n        if (value === 'C') {\n            this.setState({ display: '0', currentInput: '', operator: null, firstOperand: null });\n        } else if (value === '=') {\n            if (operator && firstOperand !== null) {\n                let result;\n                switch (operator) {\n                    case '+':\n                        result = parseFloat(firstOperand) + parseFloat(currentInput);\n                        break;\n                    case '-':\n                        result = parseFloat(firstOperand) - parseFloat(currentInput);\n                        break;\n                    case '*':\n                        result = parseFloat(firstOperand) * parseFloat(currentInput);\n                        break;\n                    case '/':\n                        result = parseFloat(firstOperand) / parseFloat(currentInput);\n                        break;\n                    case '±':\n                    case '%':\n                    case '√':\n                    default:\n                        result = currentInput;\n                }\n                this.setState({ display: result.toString(), currentInput: result.toString(), operator: null, firstOperand: null });\n            }\n        } else if (value === '±') {\n            this.setState({\n                display: (currentInput.isNaN || currentInput.length === 0) ? value : display + value,\n                currentInput: (parseFloat(currentInput) * -1).toString(),\n                operator: '±',\n                firstOperand: currentInput\n            });\n        } else if (value === '%') {\n            this.setState({\n                display: (currentInput.isNaN || currentInput.length === 0) ? value : display + value,\n                currentInput: (parseFloat(currentInput) / 100).toString(),\n                operator: '%',\n                firstOperand: currentInput\n            });\n        } else if (value === '√') {\n            console.log(currentInput)\n            this.setState({\n                display: (currentInput.isNaN || currentInput.length === 0) ? value : display + value,\n                currentInput: Math.sqrt(parseFloat(currentInput)).toString(),\n                operator: '√',\n                firstOperand: currentInput\n            });\n        } else if (['+', '-', '*', '/'].includes(value)) {\n            if (firstOperand === null) {\n                this.setState({ display: display + value, firstOperand: currentInput, operator: value, currentInput: '' });\n            } else {\n                let result;\n                switch (operator) {\n                    case '+':\n                        result = parseFloat(firstOperand) + parseFloat(currentInput);\n                        break;\n                    case '-':\n                        result = parseFloat(firstOperand) - parseFloat(currentInput);\n                        break;\n                    case '*':\n                        result = parseFloat(firstOperand) * parseFloat(currentInput);\n                        break;\n                    case '/':\n                        result = parseFloat(firstOperand) / parseFloat(currentInput);\n                        break;\n                    default:\n                        result = currentInput;\n                }\n                this.setState({ display: display + value, firstOperand: result.toString(), operator: value, currentInput: '' });\n            }\n        } else {\n            if (display === '0') {\n                this.setState({ display: value, currentInput: value });\n            } else {\n                this.setState({ display: display + value, currentInput: currentInput + value });\n            }\n        }\n    };\n\n    render() {\n        return (\n            <>\n                <CalculatorContainer>\n                    <CalculatorDivDisplay>{this.state.display}</CalculatorDivDisplay>\n                    <CalculatorDivButtons>\n                        <CalculatorButton onClick={() => this.handleClick('C')}>C</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('±')}>±</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('%')}>%</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('√')}>√</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('7')}>7</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('8')}>8</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('9')}>9</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('/')}>/</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('4')}>4</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('5')}>5</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('6')}>6</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('*')}>*</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('1')}>1</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('2')}>2</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('3')}>3</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('-')}>-</CalculatorButtonGold>\n                        <CalculatorButton onClick={() => this.handleClick('0')}>0</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('.')}>.</CalculatorButton>\n                        <CalculatorButton onClick={() => this.handleClick('=')}>=</CalculatorButton>\n                        <CalculatorButtonGold onClick={() => this.handleClick('+')}>+</CalculatorButtonGold>\n                    </CalculatorDivButtons>\n                </CalculatorContainer>\n            </>\n        );\n    }\n}\n\nexport default Calculator;","import styled from 'styled-components';\n\nexport const HomeH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;","import React, { Component } from 'react'\nimport Calculator from '../Calculator/calculator';\nimport { HomeH1 } from './HomeElements';\n\nclass Home extends Component {\n  render() {\n    return (\n      <>\n        <HomeH1>Welcome to Online Tools</HomeH1>\n        <Calculator />\n      </>\n    )\n  }\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const ContactContainer = styled.div`\n    max-width: 400px;\n    padding: 20px;\n    text-align: center;\n    margin-top: 240px;\n    margin-left: auto;\n    margin-right: auto;\n`;\n\nexport const ContactEmail = styled.h1`\n    color: black;\n    text-align: center;\n    margin-bottom: 24px;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        color: #256ce1;\n    }\n`;\n\nexport const ContactRow = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport const ContactCopyPasswordBtn = styled.button`\n    display: block;\n    min-width: 210px;\n    padding: 10px;\n    margin: 10px 0px 10px 0px;\n    background-color: #fff;\n    color: black;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #d9dada;\n    }\n`;","import React, { Component } from 'react'\nimport { ToastContainer as Toast, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; //styles to Toast\nimport { capitalizeName } from '../../utils';\nimport {\n  ContactContainer,\n  ContactCopyPasswordBtn,\n  ContactEmail,\n  ContactRow\n} from './ContactElements';\nimport {\n  COPY,\n  DEFAULT_TOAST_AUTOCLOSE,\n  EMAIL\n} from '../../constants/GeneralConstants';\n\nclass Contact extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { email: process.env.REACT_APP_EMAIL };\n  }\n\n  copyToClipboard = () => {\n    const { email } = this.state;\n    navigator.clipboard.writeText(email).then(() => {\n      console.log('Email copied to clipboard!');\n      //this.showToast('✅ Email copied to clipboard! ✅')\n    }).catch(err => {\n      console.error('Failed to copy: ', err);\n      //this.showToast('❌ Failed to copy the email ❌')\n    });\n  };\n\n  showToast = (text) => {\n    toast.success(\n      <div>{text}</div>,\n      {\n        position: toast.POSITION.TOP_RIGHT,\n        autoClose: DEFAULT_TOAST_AUTOCLOSE,\n        closeOnClick: true,\n        icon: false,\n        hideProgressBar: true\n      }\n    );\n  }\n\n  render() {\n    const { email } = this.state;\n    return (\n      <>\n        <ContactContainer>\n          <ContactEmail>{email}</ContactEmail>\n          <ContactRow>\n            <ContactCopyPasswordBtn onClick={() => {\n              this.copyToClipboard();\n              this.showToast('Email copied to clipboard!')\n            }}>\n              {capitalizeName(COPY)} {capitalizeName(EMAIL)}\n            </ContactCopyPasswordBtn>\n          </ContactRow>\n        </ContactContainer>\n        <Toast toastStyle={{ textAlign: \"center\", color: \"white\", backgroundColor: \"green\" }} />\n      </>\n    )\n  }\n}\n\nexport default Contact;\n","import styled from 'styled-components';\n\nexport const PasswordGeneratorContainer = styled.div`\n    max-width: 400px;\n    margin: 50px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const PasswordGeneratorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const PasswordGeneratorRow = styled.div`\n    display: flex;\n`;\n\nexport const PasswordGeneratorColumn = styled.div`\n    flex: 50%;\n`;\n\nexport const PasswordGeneratorSelectGroup = styled.div`\n    margin-bottom: 15px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;    \n`;\n\nexport const PasswordGeneratorInputGroup = styled.div`\n    margin-bottom: 15px;\n`;\n\nexport const PasswordGeneratorLabel = styled.label`\n    color: #555;\n    display: block;\n    margin-bottom: 5px;\n`;\n\nexport const PasswordGeneratorResultDiv = styled.div`\n    margin-top: 20px;\n    text-align: center;\n`;\n\nexport const PasswordGeneratorResultStrong = styled.strong`\n    display: block;\n    margin-bottom: 10px;\n    color: #333;\n`;\n\nexport const PasswordGeneratorResultP = styled.p`\n    font-size: 18px;\n    color: #555;\n    word-break: break-all;\n`;\n\nexport const PasswordGeneratorInputTypeNumber = styled.input`\n    font-size: 18px;\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n`;\n\nexport const PasswordGeneratorInputTypeCheckbox = styled.input`\n    margin-right: 1px;\n`;\n\nexport const PasswordGeneratorBtnGenerate = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 3px;\n    background-color: #256ce1;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #15cdfc;\n    }\n`;\n\nexport const PasswordGeneratorBtnReset = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    background-color: #ff4c4c;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #f96e5a;\n    }\n`;\n\nexport const PasswordGeneratorCopyPasswordBtn = styled.button`\n    display: block;\n    width: 100%;\n    padding: 10px;\n    margin: 10px 0px 10px 0px;\n    background-color: #fff;\n    color: black;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background-color: #d9dada;\n    }\n`;","import React, { Component } from 'react';\nimport { ToastContainer as Toast, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; //styles to Toast\nimport { capitalizeName } from '../../utils';\nimport {\n    PasswordGeneratorContainer,\n    PasswordGeneratorH1,\n    PasswordGeneratorInputGroup,\n    PasswordGeneratorInputTypeNumber,\n    PasswordGeneratorInputTypeCheckbox,\n    PasswordGeneratorLabel,\n    PasswordGeneratorCopyPasswordBtn,\n    PasswordGeneratorBtnGenerate,\n    PasswordGeneratorBtnReset,\n    PasswordGeneratorResultDiv,\n    PasswordGeneratorResultP,\n    PasswordGeneratorColumn,\n    PasswordGeneratorRow,\n    PasswordGeneratorSelectGroup\n} from './PasswordGeneratorElements';\nimport {\n    CHECKBOX,\n    DEFAULT_TOAST_AUTOCLOSE,\n    GENERATE,\n    GENERATED,\n    GENERATOR,\n    LENGTH,\n    LOWERCASE_LIST,\n    NUMBER,\n    NUMBERS_LIST,\n    PASSWORD,\n    RESET,\n    SYMBOLS_LIST,\n    UPPERCASE_LIST\n} from '../../constants/GeneralConstants';\n\nclass PasswordGenerator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            password: '',\n            length: 12,\n            isUppercase: true,\n            isLowercase: true,\n            isNumbers: true,\n            isSymbols: true,\n        };\n    }\n\n    copyToClipboard = () => {\n        const { password } = this.state;\n        navigator.clipboard.writeText(password).then(() => {\n            console.log('Password copied to clipboard!');\n            //this.showToast('✅ Password copied to clipboard! ✅')\n        }).catch(err => {\n            console.error('Failed to copy: ', err);\n            //this.showToast('❌ Failed to copy the password ❌')\n        });\n    };\n\n    generatePassword = () => {\n        const { length, isUppercase, isLowercase, isNumbers, isSymbols } = this.state;\n        let charset = '';\n        if (isUppercase) charset += UPPERCASE_LIST;\n        if (isLowercase) charset += LOWERCASE_LIST;\n        if (isNumbers) charset += NUMBERS_LIST;\n        if (isSymbols) charset += SYMBOLS_LIST;\n\n        if (charset.length === 0) {\n            return 'Please select at least one character type';\n        }\n\n        let password = '';\n        for (let i = 0; i < length; i++) {\n            const randomIndex = Math.floor(Math.random() * charset.length);\n            password += charset[randomIndex];\n        }\n\n        this.setState({ password });\n    };\n\n    handleChange = (event) => {\n        const { name, value, type, checked } = event.target;\n        const newValue = type === CHECKBOX ? checked : value;\n        this.setState({ [name]: newValue });\n    };\n\n\n    resetPassword = () => {\n        let password = '';\n        this.setState({ password });\n    };\n\n    showToast = (text) => {\n        toast.success(\n            <div>{text}</div>,\n            {\n                position: toast.POSITION.TOP_RIGHT,\n                autoClose: DEFAULT_TOAST_AUTOCLOSE,\n                closeOnClick: true,\n                icon: false,\n                hideProgressBar: true\n            }\n        );\n    }\n\n    render() {\n        return (\n            <>\n                <PasswordGeneratorH1>\n                    {capitalizeName(PASSWORD)} {capitalizeName(GENERATOR)}\n                </PasswordGeneratorH1>\n                <PasswordGeneratorContainer>\n                    <PasswordGeneratorSelectGroup>\n                        <PasswordGeneratorLabel>\n                            Password Length:\n                            &nbsp;\n                            <PasswordGeneratorInputTypeNumber\n                                type={NUMBER}\n                                name={LENGTH}\n                                value={this.state.length}\n                                onChange={this.handleChange}\n                                min=\"1\"\n                                max=\"100\"\n                            />\n                        </PasswordGeneratorLabel>\n                    </PasswordGeneratorSelectGroup>\n\n                    <PasswordGeneratorRow>\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isUppercase\"\n                                        checked={this.state.isUppercase}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Uppercase\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isLowercase\"\n                                        checked={this.state.isLowercase}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Lowercase\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n                    </PasswordGeneratorRow>\n\n                    <PasswordGeneratorRow>\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isNumbers\"\n                                        checked={this.state.isNumbers}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Numbers\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n\n                        <PasswordGeneratorColumn>\n                            <PasswordGeneratorInputGroup>\n                                <PasswordGeneratorLabel>\n                                    <PasswordGeneratorInputTypeCheckbox\n                                        type={CHECKBOX}\n                                        name=\"isSymbols\"\n                                        checked={this.state.isSymbols}\n                                        onChange={this.handleChange}\n                                    />\n                                    &nbsp;\n                                    Include Symbols\n                                </PasswordGeneratorLabel>\n                            </PasswordGeneratorInputGroup>\n                        </PasswordGeneratorColumn>\n                    </PasswordGeneratorRow>\n\n                    <PasswordGeneratorBtnGenerate onClick={this.generatePassword}>\n                        {capitalizeName(GENERATE)} {capitalizeName(PASSWORD)}\n                    </PasswordGeneratorBtnGenerate>\n\n                    <PasswordGeneratorBtnReset onClick={this.resetPassword}>\n                        {capitalizeName(RESET)}\n                    </PasswordGeneratorBtnReset>\n\n                    <PasswordGeneratorResultDiv>\n                        {\n                            this.state.password ?\n                                <PasswordGeneratorResultP>\n                                    {capitalizeName(GENERATED)} {capitalizeName(PASSWORD)}:\n                                    <br />\n                                    {this.state.password}\n                                    <PasswordGeneratorCopyPasswordBtn onClick={() => {\n                                        this.copyToClipboard();\n                                        this.showToast('Password copied to clipboard!')\n                                    }}>\n                                        Copy Password\n                                    </PasswordGeneratorCopyPasswordBtn>\n                                </PasswordGeneratorResultP>\n                                : <div></div>\n                        }\n                    </PasswordGeneratorResultDiv>\n                </PasswordGeneratorContainer>\n                <Toast toastStyle={{ textAlign: \"center\", color: \"white\", backgroundColor: \"green\" }} />\n            </>\n        );\n    }\n}\n\nexport default PasswordGenerator;","import styled from 'styled-components';\nimport { Link as LinkRouter } from 'react-router-dom';\nimport { FaTimes } from 'react-icons/fa';\n\nexport const SidebarContainer = styled.aside`\n    position: fixed;\n    z-index: 999;\n    width: 100%;\n    height: 100%;\n    background: white;\n    display: grid;\n    align-items: center;\n    top: 0;\n    left: 0;\n    transition: 0.3s ease-in-out;\n\n    opacity: ${({ isSidebar }) => (isSidebar ? '100%' : '0')};\n    top: ${({ isSidebar }) => (isSidebar ? '0' : '-100%')};\n\n    /* top: 0; */\n`;\n\nexport const Icon = styled.div`\n    position: absolute;\n    top: 1.2rem;\n    right: 1.5rem;\n    background: transparent;\n    font-size: 2rem;\n    cursor: pointer;\n    outline: none;\n`;\n\nexport const CloseIcon = styled(FaTimes)`\n    color: #000;\n    &:hover {\n        transition: all 0.2s ease-in-out;\n        color: #15cdfc;\n    }    \n`;\n\nexport const SidebarDiv = styled.div`\n    color: #fff;\n`;\n\nexport const SidebarUl = styled.ul`\n    display: grid;\n    grid-template-columns: 1fr;\n    //grid-template-rows: repeat(3,90px);\n    grid-template-rows: repeat(4,120px);\n    text-align: center;\n\n    @media screen and (max-width: 480px){\n        //grid-template-rows: repeat(3,90px);\n        grid-template-rows: repeat(4,120px);\n    }\n`;\n\nexport const SidebarLinkRouter = styled(LinkRouter)`\n    border-radius: 50px;\n    background: white;\n    white-space: nowrap;\n    padding: 16px 64px;\n    color: black;\n    font-size: 24px;\n    outline: none;\n    border: none;\n    cursor: pointer\n    transition: all 0.2s ease-in-out;\n    text-decoration: none;\n\n    &:hover {\n        transition: all 0.2s ease-in-out;\n        color: #15cdfc;\n    }\n`;\n\nexport const SidebarBtnDiv = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n\nexport const SidebarBtnLinkRouter = styled(LinkRouter)`\n    color: #fff;\n    background: #000;\n    border-radius: 50px;\n    white-space: nowrap;\n    padding: 16px 64px;\n    font-size: 16px;\n    outline: none;\n    border: none;\n    cursor: pointer\n    transition: all 0.2s ease-in-out;\n    text-decoration: none;\n\n    &:hover {\n        color: #000;\n        background: #15cdfc;\n        transition: all 0.2s ease-in-out;\n    }\n`;","import React, { Component } from 'react'\nimport { asPath, capitalizeName } from '../../utils';\nimport {\n    CALC,\n    CONTACT,\n    GEN,\n    HOME,\n    NET,\n    NET_CALC,\n    ONLINE_TOOLS_REACT,\n    PASSWD,\n    PASSWORD_GENERATOR,\n} from '../../constants/GeneralConstants';\nimport {\n    CloseIcon,\n    Icon,\n    SidebarContainer,\n    SidebarDiv,\n    SidebarUl,\n    SidebarLinkRouter\n} from './SidebarElements';\n\nclass Sidebar extends Component {\n    render() {\n\n        const { isSidebar, toggle } = this.props;\n\n        return (\n            <SidebarContainer isSidebar={isSidebar} onClick={toggle}>\n                <Icon onclick={toggle}>\n                    <CloseIcon />\n                </Icon>\n                <SidebarDiv>\n                    <SidebarUl>\n                        <SidebarLinkRouter to={asPath(ONLINE_TOOLS_REACT) + asPath(HOME)}>{capitalizeName(HOME)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(ONLINE_TOOLS_REACT) + asPath(NET_CALC)}>{capitalizeName(NET)} {capitalizeName(CALC)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(ONLINE_TOOLS_REACT) + asPath(PASSWORD_GENERATOR)}>{capitalizeName(PASSWD)} {capitalizeName(GEN)}</SidebarLinkRouter>\n                        <SidebarLinkRouter to={asPath(ONLINE_TOOLS_REACT) + asPath(CONTACT)}>{capitalizeName(CONTACT)}</SidebarLinkRouter>\n                    </SidebarUl>\n                </SidebarDiv>\n                {/*\n                <SidebarBtnDiv>\n                    <SidebarBtnLinkRouter to={asPath(SIGN_IN)}>{capitalizeName(SIGN)} {capitalizeName(IN)}</SidebarBtnLinkRouter>\n                </SidebarBtnDiv>\n                */}\n            </SidebarContainer>\n        )\n    }\n}\n\nexport default Sidebar;","import styled from 'styled-components';\n\nexport const NetworkCalculatorContainer = styled.div`\n    max-width: 400px;\n    margin: 50px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const NetworkCalculatorH1 = styled.h1`\n    text-align: center;\n    margin-top: 24px;\n`;\n\nexport const NetworkCalculatorInputGroup = styled.div`\n    margin-bottom: 20px;\n`;\n\nexport const NetworkCalculatorInputGroupLabel = styled.div`\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n`;\n\nexport const NetworkCalculatorInputGroupInput = styled.input`\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    font-size: 1em;\n`;\n\nexport const NetworkCalculatorRow = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nexport const NetworkCalculatorColumnLeftBtn = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n`;\n\nexport const NetworkCalculatorColumnRightBtn = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;\n\nexport const NetworkCalculatorBtnNetData = styled.button`\n    background-color: #007bff;\n    color: #fff;\n    min-width: 120px;\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n    \n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #15cdfc;\n    }\n`;\n\nexport const NetworkCalculatorBtnReset = styled.button`\n    background-color: #ff4c4c;\n    color: #fff;\n    min-width: 120px;\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-size: 1em;\n    cursor: pointer;\n\n    &:hover {\n        transition: all 0.1s ease-in-out;\n        background: #f96e5a;\n    }\n`;\n\nexport const NetworkCalculatorRowNetData = styled.div`\n    display: flex;\n    align-items: center;\n    //justify-content: center;\n`;\n\nexport const NetworkCalculatorColumnLeftNetData = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n`;\n\nexport const NetworkCalculatorColumnRightNetData = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;\n\nexport const NetworkCalculatorH1Result = styled.h3`\n    text-align: center;\n    margin-bottom: 12px;\n`;\n\nexport const NetworkCalculatorDivResult = styled.div`\n    display: flex;\n    flex-direction: column;   \n    text-align: center;\n`;\n\nexport const NetworkCalculatorRowResult = styled.div`\n    display: flex;\n    align-items: center;   \n`;\n\nexport const NetworkCalculatorColumnLeftResult = styled.div`\n    flex: 50%;\n    text-align: right;\n    margin-right: 1px;\n    font-weight: bold;\n`;\n\nexport const NetworkCalculatorColumnRightResult = styled.div`\n    flex: 50%;\n    text-align: left;\n    margin-left: 1px;    \n`;","import React, { Component } from 'react';\nimport { capitalizeName } from '../../utils';\n//import './NetworkCalculator.css'; // Import the CSS file for styling\nimport {\n    NetworkCalculatorColumnLeftBtn,\n    NetworkCalculatorColumnLeftResult,\n    NetworkCalculatorColumnRightBtn,\n    NetworkCalculatorColumnRightResult,\n    NetworkCalculatorContainer,\n    NetworkCalculatorDivResult,\n    NetworkCalculatorH1,\n    NetworkCalculatorH1Result,\n    NetworkCalculatorInputGroup,\n    NetworkCalculatorInputGroupInput,\n    NetworkCalculatorInputGroupLabel,\n    NetworkCalculatorBtnNetData,\n    NetworkCalculatorBtnReset,\n    NetworkCalculatorRow,\n    NetworkCalculatorRowResult,\n} from './NetworkCalculatorElements';\nimport { CALCULATOR, DATA, DEFAULT_CIDR, DEFAULT_IP_ADDRESS, NET, NETWORK, RESET } from '../../constants/GeneralConstants';\n\nclass NetCalculator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ipAddress: DEFAULT_IP_ADDRESS,\n            cidr: DEFAULT_CIDR,\n            networkAddress: '',\n            broadcastAddress: '',\n            firstUsableHost: '',\n            lastUsableHost: '',\n            totalHosts: '',\n            usableHosts: '',\n            subnetMask: '',\n            wildcardMask: '',\n            binaryNetmask: '',\n            cidrNotation: ''\n        };\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n    };\n\n    calculateNetInfo = () => {\n        const { ipAddress, cidr } = this.state;\n        const ipParts = ipAddress.split('.').map(Number);\n        const cidrValue = parseInt(cidr, 10);\n\n        if (ipParts.length !== 4 || cidrValue < 0 || cidrValue > 32) {\n            alert('Invalid IP address or CIDR value');\n            return;\n        }\n\n        const subnetMask = (0xffffffff << (32 - cidrValue)) >>> 0;\n        const wildcardMask = ~subnetMask & 0xffffffff;\n        const ipAddressInt = (ipParts[0] << 24) | (ipParts[1] << 16) | (ipParts[2] << 8) | ipParts[3];\n        const networkAddress = ipAddressInt & subnetMask;\n        const broadcastAddress = networkAddress | ~subnetMask;\n        const firstUsableHost = networkAddress + 1;\n        const lastUsableHost = broadcastAddress - 1;\n        const totalHosts = 2 ** (32 - cidrValue);\n        const usableHosts = totalHosts - 2;\n\n        this.setState({\n            networkAddress: this.ipToString(networkAddress),\n            broadcastAddress: this.ipToString(broadcastAddress),\n            firstUsableHost: this.ipToString(firstUsableHost),\n            lastUsableHost: this.ipToString(lastUsableHost),\n            totalHosts,\n            usableHosts,\n            subnetMask: this.ipToString(subnetMask),\n            wildcardMask: this.ipToString(wildcardMask),\n            binaryNetmask: this.toBinary(subnetMask),\n            cidrNotation: `${ipAddress}/${cidr}`\n        });\n    };\n\n    ipToString = (ip) => {\n        return `${(ip >>> 24) & 0xff}.${(ip >>> 16) & 0xff}.${(ip >>> 8) & 0xff}.${ip & 0xff}`;\n    };\n\n    resetNetInfo = () => {\n        this.setState({\n            ipAddress: DEFAULT_IP_ADDRESS,\n            cidr: DEFAULT_CIDR,\n            networkAddress: '',\n            broadcastAddress: '',\n            firstUsableHost: '',\n            lastUsableHost: '',\n            totalHosts: '',\n            usableHosts: '',\n            subnetMask: '',\n            wildcardMask: '',\n            binaryNetmask: '',\n            cidrNotation: ''\n        });\n    }\n\n    toBinary = (num) => {\n        const binaryString = num.toString(2).padStart(32, '0');\n        return binaryString.match(/.{1,8}/g).join('.');\n    };\n\n    render() {\n        const {\n            ipAddress,\n            cidr,\n            networkAddress,\n            broadcastAddress,\n            firstUsableHost,\n            lastUsableHost,\n            totalHosts,\n            usableHosts,\n            subnetMask,\n            wildcardMask,\n            binaryNetmask,\n            cidrNotation\n        } = this.state;\n\n        return (\n            <>\n                <NetworkCalculatorH1>\n                    {capitalizeName(NETWORK)} {capitalizeName(CALCULATOR)}\n                </NetworkCalculatorH1>\n                <NetworkCalculatorContainer>\n                    <NetworkCalculatorInputGroup>\n                        <NetworkCalculatorInputGroupLabel htmlFor=\"ipAddress\">IP Address:</NetworkCalculatorInputGroupLabel>\n                        <NetworkCalculatorInputGroupInput\n                            type=\"text\"\n                            id=\"ipAddress\"\n                            name=\"ipAddress\"\n                            value={ipAddress}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Enter IP address (e.g., 192.168.1.1)\"\n                        />\n                    </NetworkCalculatorInputGroup>\n                    <NetworkCalculatorInputGroup>\n                        <NetworkCalculatorInputGroupLabel htmlFor=\"cidr\">CIDR:</NetworkCalculatorInputGroupLabel>\n                        <NetworkCalculatorInputGroupInput\n                            type=\"number\"\n                            id=\"cidr\"\n                            name=\"cidr\"\n                            value={cidr}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Enter CIDR (0-32)\"\n                            min=\"0\"\n                            max=\"32\"\n                        />\n                    </NetworkCalculatorInputGroup>\n                    <NetworkCalculatorRow>\n                        <NetworkCalculatorColumnLeftBtn>\n                            <NetworkCalculatorBtnNetData onClick={this.calculateNetInfo}>\n                                {capitalizeName(NET)} {capitalizeName(DATA)}\n                            </NetworkCalculatorBtnNetData>\n                        </NetworkCalculatorColumnLeftBtn>\n                        <NetworkCalculatorColumnRightBtn>\n                            <NetworkCalculatorBtnReset onClick={this.resetNetInfo}>\n                                {capitalizeName(RESET)}\n                            </NetworkCalculatorBtnReset>\n                        </NetworkCalculatorColumnRightBtn>\n                    </NetworkCalculatorRow>\n                </NetworkCalculatorContainer>\n                {networkAddress && (\n                    <NetworkCalculatorDivResult>\n                        <NetworkCalculatorH1Result>{capitalizeName(NETWORK)} {capitalizeName(DATA)}</NetworkCalculatorH1Result>\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Network Address:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{networkAddress}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Broadcast Address:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{broadcastAddress}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>First Usable Host:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{firstUsableHost}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Last Usable Host:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{lastUsableHost}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Total Hosts:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{totalHosts}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Usable Hosts:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{usableHosts}\n                            </NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Subnet Mask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{subnetMask}\n                            </NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Wildcard Mask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{wildcardMask}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>Binary Netmask:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{binaryNetmask}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                        <NetworkCalculatorRowResult>\n                            <NetworkCalculatorColumnLeftResult>CIDR Notation:</NetworkCalculatorColumnLeftResult>\n                            <NetworkCalculatorColumnRightResult>{cidrNotation}</NetworkCalculatorColumnRightResult>\n                        </NetworkCalculatorRowResult>\n\n                    </NetworkCalculatorDivResult>\n                )}\n            </>\n        );\n    }\n}\n\nexport default NetCalculator;","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home/home';\n//import AdvancedCalculator from './pages/Calculator/calculator';\nimport Contact from './pages/Contact/contact';\nimport {\n  CONTACT,\n  HOME,\n  NET_CALC,\n  ONLINE_TOOLS_REACT,\n  PASSWORD_GENERATOR\n} from './constants/GeneralConstants';\nimport asPath from './utils';\nimport PasswordGenerator from './pages/PasswordGenerator/passwordGenerator';\nimport Sidebar from './components/Sidebar';\nimport NetworkCalculator from './pages/NetworkCalculator/networkCalculator';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isSidebar: false,\n    }\n  }\n\n  toggle = () => {\n    this.state.isSidebar ?\n      this.setState({ isSidebar: false }) :\n      this.setState({ isSidebar: true });\n  }\n\n  render() {\n\n    var { isSidebar } = this.state;\n\n    return (\n      <Router>\n        <Navbar isSidebar={isSidebar} toggle={this.toggle} />\n        <Sidebar isSidebar={isSidebar} toggle={this.toggle} />\n        <Switch>\n          <Route path={asPath(ONLINE_TOOLS_REACT) + asPath(HOME)} exact component={Home} />\n          <Route path={asPath(ONLINE_TOOLS_REACT) + asPath(NET_CALC)} component={NetworkCalculator} />\n          <Route path={asPath(ONLINE_TOOLS_REACT) + asPath(PASSWORD_GENERATOR)} component={PasswordGenerator} />\n          <Route path={asPath(ONLINE_TOOLS_REACT) + asPath(CONTACT)} component={Contact} />\n          {/* <Route path={asPath(SIGN_UP)} component={SignUp} /> */}\n          <Route path=\"*\" component={Home} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n  <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}